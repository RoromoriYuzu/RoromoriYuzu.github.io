import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.BgId8OS5.js";const p="/Python%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95.assets/image-20240919210651650.png",c=JSON.parse('{"title":"Linux","description":"","frontmatter":{},"headers":[],"relativePath":"posts/Interview/Python开发面试.md","filePath":"posts/Interview/Python开发面试.md","lastUpdated":null}'),e={name:"posts/Interview/Python开发面试.md"};function t(h,s,k,r,d,o){return n(),a("div",null,s[0]||(s[0]=[l('<h1 id="linux" tabindex="-1">Linux <a class="header-anchor" href="#linux" aria-label="Permalink to &quot;Linux&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><h3 id="在-linux-系统中-经常需要查看正在运行的进程-下列哪条命令不能获取所有正在运行的进程信息" tabindex="-1">在 Linux 系统中，经常需要查看正在运行的进程，下列哪条命令不能获取所有正在运行的进程信息？ <a class="header-anchor" href="#在-linux-系统中-经常需要查看正在运行的进程-下列哪条命令不能获取所有正在运行的进程信息" aria-label="Permalink to &quot;在 Linux 系统中，经常需要查看正在运行的进程，下列哪条命令不能获取所有正在运行的进程信息？&quot;">​</a></h3><p>A. <code>ps aux</code></p><p><strong>正确</strong>。<code>ps aux</code> 是一个常用命令，用于显示所有用户的所有进程，包括后台进程。它是 Linux 中查看进程信息的经典命令。</p><p><code>ps</code> 是 &quot;process status&quot; 的缩写，<strong>a</strong>: 显示所有用户的进程，<strong>u</strong>: 以用户为中心的格式显示进程信息，<strong>x</strong>: 显示没有控制终端的进程。</p><p>执行 <code>ps aux</code> 后，通常会看到以下字段：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">USER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       PID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %CPU</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %MEM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    VSZ</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RSS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TTY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      STAT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> START</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   TIME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> COMMAND</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>B. <code>netstat -ant</code><strong>错误</strong>。<code>netstat -ant</code> 用于显示网络连接的相关信息，尤其是查看所有网络连接的状态（如监听、已建立的连接等），并不会列出所有进程的信息。</p><p>C. <code>ps -ef</code><strong>正确</strong>。<code>ps -ef</code> 是另一个查看进程信息的常用命令，<code>-e</code> 选项显示系统中所有的进程，<code>-f</code> 选项提供详细的输出格式，包括进程的父进程、启动时间等。</p><p>D. <code>top</code><strong>正确</strong>。<code>top</code> 是一个动态显示正在运行进程信息的命令，可以实时查看 CPU、内存的使用情况，并动态更新进程列表。</p><h3 id="shell-脚本-是一种为-shell-编写的脚本程序。现有一个-test-sh-文件-且有可执行权限-文件中内容为" tabindex="-1">Shell 脚本，是一种为 shell 编写的脚本程序。现有一个 <code>test.sh</code> 文件，且有可执行权限，文件中内容为： <a class="header-anchor" href="#shell-脚本-是一种为-shell-编写的脚本程序。现有一个-test-sh-文件-且有可执行权限-文件中内容为" aria-label="Permalink to &quot;Shell 脚本，是一种为 shell 编写的脚本程序。现有一个 `test.sh` 文件，且有可执行权限，文件中内容为：&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#!/bin/bash</span></span>\n<span class="line"><span>aa=&#39;Hello World !&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>请问下面选项中哪个能正常显示 <code>Hello World !</code>？</p><p>A. <code>sh test.sh &gt;/dev/null 1 &amp;&amp; echo $aa</code></p><p><strong>错误</strong>。该命令首先使用 <code>sh</code> 执行脚本，输出重定向到 <code>/dev/null</code>。<code>&amp;&amp;</code> 表示如果脚本执行成功，则执行 <code>echo $aa</code>。但是，<code>$aa</code> 变量在子 shell 中定义，在父 shell 中不可见，因此不会显示 &quot;Hello World !”。</p><p>B. <code>./test.sh &gt;/dev/null 1 &amp;&amp; echo $aa</code></p><p><strong>错误</strong>。该命令使用当前目录的 <code>test.sh</code> 执行脚本，输出同样重定向到 <code>/dev/null</code>。<code>&amp;&amp;</code> 同样确保只有在脚本成功执行后才执行 <code>echo $aa</code>。由于脚本是在子 shell 中执行的，所以在父 shell 中 <code>$aa</code> 变量依然不可见，因此不会输出 &quot;Hello World !”。</p><p>C. <code>bash test.sh &gt;/dev/null 1 &amp;&amp; echo $aa</code></p><p><strong>错误</strong>。这个命令使用 <code>bash</code> 执行脚本，并将输出重定向到 <code>/dev/null</code>。虽然使用 <code>bash</code> 保证了正确的 shell，但 <code>$aa</code> 仍然是在子 shell 中定义，所以在父 shell 中不可见，不会输出 &quot;Hello World !”。</p><p>D. <code>. ./test.sh &gt;/dev/null 1 &amp;&amp; echo $aa</code></p><p><strong>正确</strong>。使用点（<code>.</code>）或等价的 <code>source</code> 命令执行脚本可以使脚本中定义的变量在当前 shell 环境中可用。这里，<code>. ./test.sh</code> 表示在当前 shell 中运行脚本，不创建新的子 shell。因此，脚本中定义的 <code>$aa</code> 变量在脚本执行完毕后仍然可见，并且 <code>echo $aa</code> 将会正确输出 &quot;Hello World !”。</p><h3 id="执行ls-la-usr-bin-passwd后-返回如下内容-下列描述错误的是" tabindex="-1">执行<code>ls -la /usr/bin/passwd</code>后，返回如下内容，下列描述错误的是： <a class="header-anchor" href="#执行ls-la-usr-bin-passwd后-返回如下内容-下列描述错误的是" aria-label="Permalink to &quot;执行`ls -la /usr/bin/passwd`后，返回如下内容，下列描述错误的是：&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-rwsr-xr-x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 59640</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 27</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2017</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/passwd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>选项：</strong></p><p>A. 程序可以被任何账户执行</p><p><strong>正确</strong>。文件权限 <code>rwsr-xr-x</code> 表明所有用户（用户组和其他用户）都有执行 (<code>x</code>) 权限。</p><p>B. 文件属性中的s表示这个文件是系统文件</p><p><strong>错误</strong>。在文件权限中的 <code>s</code>（在这个上下文中是 <code>rws</code> 中的 <code>s</code>）表示该可执行文件具有 setuid（设置用户ID）属性。这意味着不论哪个用户执行该程序，程序都将具有文件所有者（在这个案例中是 root）的权限。<code>s</code> 并不表示文件是系统文件。</p><p>C. 这不是一个目录</p><p><strong>正确</strong>。根据输出的第一个字符是 <code>-</code>（而不是 <code>d</code>），我们可以确认 <code>/usr/bin/passwd</code> 是一个文件，不是目录。</p><p>D. 文件/目录属于root用户</p><p><strong>正确</strong>。输出中的 <code>root root</code> 部分表明文件的所有者和所属组都是 root。</p><p>文件权限输出的顺序依次为 当前用户 当前用户组 其他用户</p><p>4-r-读 2-w-写 1-x-执行 s为文件所有者同等权限</p><p>7 = 1+2+4</p><p>chmod 777 为分别对各用户授权 读写执行</p><h3 id="linux-文件系统的文件都按其作用分门别类地放在相关的目录中-对于外部设备文件-一般应将其放在哪个目录中" tabindex="-1">Linux 文件系统的文件都按其作用分门别类地放在相关的目录中，对于外部设备文件，一般应将其放在哪个目录中（） <a class="header-anchor" href="#linux-文件系统的文件都按其作用分门别类地放在相关的目录中-对于外部设备文件-一般应将其放在哪个目录中" aria-label="Permalink to &quot;Linux 文件系统的文件都按其作用分门别类地放在相关的目录中，对于外部设备文件，一般应将其放在哪个目录中（）&quot;">​</a></h3><p>A /bin</p><p>B /etc</p><p>C /dev</p><p>D /lib</p><p>在Linux系统中，挂载的设备通常可以在 <strong><code>/mnt</code></strong> 或 <strong><code>/media</code></strong> 目录下找到。这两个目录的使用略有区别，具体如下：</p><p>/mnt</p><ul><li><strong><code>/mnt</code></strong> 目录通常用于临时挂载存储设备。系统管理员可能会在这里手动挂载文件系统。</li><li>例如，如果你有一个外部硬盘或网络文件系统，你可能会将其挂载在如 <code>/mnt/mydisk</code> 或 <code>/mnt/nfs</code> 这样的子目录下。</li></ul><p>/media</p><ul><li><strong><code>/media</code></strong> 目录通常由现代Linux发行版用于自动挂载可移动存储设备，如USB闪存驱动器、CD-ROMs等。</li><li>当你插入一个USB驱动器或CD-ROM时，系统会自动创建一个与设备名称相关的子目录，如 <code>/media/usb</code> 或 <code>/media/[username]/[device_label]</code>。</li></ul><p>此外，还有一个全局的挂载点目录 <strong><code>/dev</code></strong>，它包含了所有的设备文件。在Linux中，硬件设备被视为文件，可以在 <code>/dev</code> 目录中找到相应的设备文件，比如硬盘通常表示为 <code>/dev/sda</code>、<code>/dev/sdb</code> 等。</p><h3 id="用-vi-打开一个文件-如何用字母-new-来代替字母-old" tabindex="-1">用 vi 打开一个文件，如何用字母 “new” 来代替字母 “old” <a class="header-anchor" href="#用-vi-打开一个文件-如何用字母-new-来代替字母-old" aria-label="Permalink to &quot;用 vi 打开一个文件，如何用字母 “new” 来代替字母 “old”&quot;">​</a></h3><p><code>:1,$s/old/new/g</code></p><p>1,$ 表示从第一行到文件尾行； s 表示替换； /g 表示在全局文件中进行替换，省略时仅对每行第一个匹配串进行替换。</p><h2 id="知识" tabindex="-1">知识 <a class="header-anchor" href="#知识" aria-label="Permalink to &quot;知识&quot;">​</a></h2><p>DNS服务的主要配置文件，通常位于<code>/etc/named.conf</code></p><p>创建一个管理员用户 admin <code>useradd -u 0 -o admin</code> -u 用户号 指定用户的用户号；因为系统用户的用户号为 0，故指定用户号为 0，如果同时有 -o 选项，则可以重复使用其他用户的标识号，因为系统本身存在用户号为 0 的系统用户，故应该使用该参数。</p><h3 id="proc" tabindex="-1"><code>/proc</code> <a class="header-anchor" href="#proc" aria-label="Permalink to &quot;`/proc`&quot;">​</a></h3><p>是一个 <strong>虚拟文件系统</strong>，也称为 <strong>proc 文件系统</strong>。它是内核提供的一个接口，用于访问内核和系统运行时的信息。</p><h4 id="_1-进程相关" tabindex="-1">1. <strong>进程相关</strong> <a class="header-anchor" href="#_1-进程相关" aria-label="Permalink to &quot;1. **进程相关**&quot;">​</a></h4><p>每个正在运行的进程都有一个以进程 ID (PID) 命名的目录，例如 <code>/proc/1234</code> 表示 PID 为 1234 的进程。</p><ul><li><code>/proc/&lt;PID&gt;/cmdline</code>：进程的启动命令行参数。</li><li><code>/proc/&lt;PID&gt;/cwd</code>：进程的当前工作目录。</li><li><code>/proc/&lt;PID&gt;/exe</code>：指向进程正在执行的二进制文件。</li><li><code>/proc/&lt;PID&gt;/status</code>：进程的状态信息（如 UID、GID、内存使用）。</li><li><code>/proc/&lt;PID&gt;/fd/</code>：文件描述符列表。</li></ul><h4 id="_2-系统信息" tabindex="-1">2. <strong>系统信息</strong> <a class="header-anchor" href="#_2-系统信息" aria-label="Permalink to &quot;2. **系统信息**&quot;">​</a></h4><ul><li><code>/proc/cpuinfo</code>：CPU 相关信息（如核心数、架构、频率）。</li><li><code>/proc/meminfo</code>：系统内存的使用情况。</li><li><code>/proc/uptime</code>：系统启动以来的运行时间。</li><li><code>/proc/loadavg</code>：系统的平均负载。</li><li><code>/proc/devices</code>：系统中的设备列表。</li></ul><h4 id="_3-文件系统信息" tabindex="-1">3. <strong>文件系统信息</strong> <a class="header-anchor" href="#_3-文件系统信息" aria-label="Permalink to &quot;3. **文件系统信息**&quot;">​</a></h4><ul><li><code>/proc/mounts</code>：已挂载文件系统的信息。</li><li><code>/proc/swaps</code>：当前启用的交换空间信息。</li></ul><h4 id="_4-内核参数" tabindex="-1">4. <strong>内核参数</strong> <a class="header-anchor" href="#_4-内核参数" aria-label="Permalink to &quot;4. **内核参数**&quot;">​</a></h4><ul><li><p>/proc/sys/</p><p>：存储内核参数，可用于读取和动态修改。</p><p>例如：</p><ul><li><code>/proc/sys/net/ipv4/ip_forward</code>：是否启用 IP 转发。</li><li><code>/proc/sys/kernel/hostname</code>：系统主机名。</li></ul></li></ul><h4 id="_5-硬件相关" tabindex="-1">5. <strong>硬件相关</strong> <a class="header-anchor" href="#_5-硬件相关" aria-label="Permalink to &quot;5. **硬件相关**&quot;">​</a></h4><ul><li><code>/proc/partitions</code>：已识别的磁盘分区。</li><li><code>/proc/scsi/</code>：SCSI 设备信息。</li></ul><h2 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h2><p>ps -aux：用于查看当前系统中所有运行的进程，包括正在运行的恶意程序或异常进程。</p><p>last：用于查看最近登录系统的用户信息，能够帮助检查可疑登录活动。</p><p>w：显示当前登录系统的用户信息及其执行的命令，可以用来了解当前系统的用户活动。</p><p>more .bash_history：用于查看用户的历史命令记录，<code>.bash_history</code> 中保存了用户执行的命令，这对排查异常操作非常有帮助。</p><p>在 UNIX 和 Linux 系统中，有三个主要的文件描述符：</p><p>0 — 标准输入 (stdin) 1 — 标准输出 (stdout) 2 — 标准错误输出 (stderr)</p><h3 id="" tabindex="-1">&amp; <a class="header-anchor" href="#" aria-label="Permalink to &quot;&amp;&quot;">​</a></h3><p><strong>后台执行</strong></p><p>在命令的末尾添加 <code>&amp;</code> 会使该命令在后台运行。这意味着你可以继续在同一个终端会话中执行其他命令，而不需要等待当前命令完成。</p><p>例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>python script.py &amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这会使 <code>python script.py</code> 在后台运行，终端会立即返回提示符，允许用户继续执行其他命令。</p><p><strong>命令列表分隔符</strong></p><p>在一行中用 <code>&amp;</code> 分隔多个命令可以连续执行这些命令，无需等待前一个命令完成。这与使用分号 <code>;</code> 不同，后者会等待每个命令完成后再执行下一个命令。</p><p>例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>command1 &amp; command2 &amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这行命令会同时启动 <code>command1</code> 和 <code>command2</code>，都在后台运行。</p><p><strong>文件描述符的重定向</strong></p><p>在重定向操作中，<code>&amp;</code> 用于指示后面的数字是一个文件描述符，而不是一个文件。这在将一个流重定向到另一个流时特别有用。</p><p>例如：</p><ul><li><code>2&gt;&amp;1</code> —— 将标准错误（文件描述符 2）重定向到标准输出（文件描述符 1）。</li><li><code>1&gt;&amp;2</code> —— 将标准输出（文件描述符 1）重定向到标准错误（文件描述符 2）。</li></ul><p><strong>逻辑 AND 运算符</strong></p><p>在逻辑控制中，<code>&amp;&amp;</code> 用作 AND 运算符，仅当左边的命令成功执行（即返回值为 0，表示成功）时，才执行右边的命令。</p><p>例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>command1 &amp;&amp; command2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里 <code>command2</code> 只有在 <code>command1</code> 成功执行后才会被执行。</p><h3 id="inode" tabindex="-1">inode <a class="header-anchor" href="#inode" aria-label="Permalink to &quot;inode&quot;">​</a></h3><p>主要内容包括：</p><ul><li><strong>文件类型</strong>：这表明文件是普通文件、目录、符号链接还是其他类型的特殊文件。</li><li><strong>权限</strong>：这包括文件的读、写和执行权限。</li><li><strong>链接数</strong>：文件的硬链接数量。当链接数降至零时，文件会被删除。</li><li><strong>文件大小</strong>：文件的字节数。</li><li><strong>所有者</strong>：文件的所有者的用户ID（UID）。</li><li><strong>组</strong>：文件的组ID（GID）。</li><li>时间戳 <ul><li><strong>访问时间（atime）</strong>：文件最后一次被访问的时间。</li><li><strong>修改时间（mtime）</strong>：文件内容最后一次被修改的时间。</li><li><strong>改变时间（ctime）</strong>：文件的 inode 信息最后一次被修改的时间。</li></ul></li><li><strong>指向数据块的指针</strong>：这些指针指向存储文件数据的磁盘块。</li></ul><p>在 Unix-like 系统中，你可以使用 <code>ls -i</code> 命令来查看文件的 inode 号，或使用 <code>stat</code> 命令来查看文件的完整 inode 信息：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ls -i filename</span></span>\n<span class="line"><span>stat filename</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="常见的符号" tabindex="-1">常见的符号 <a class="header-anchor" href="#常见的符号" aria-label="Permalink to &quot;常见的符号&quot;">​</a></h3><p><strong>通配符</strong></p><ul><li><code>*</code>：匹配任意数量的字符，例如 <code>*.txt</code> 匹配所有以 <code>.txt</code> 结尾的文件。</li><li><code>?</code>：匹配任意单个字符，例如 <code>?.txt</code> 匹配所有一字符名称后跟 <code>.txt</code> 的文件。</li><li><code>[abc]</code>：匹配方括号内的任何一个字符，例如 <code>file[1-3].txt</code> 匹配 <code>file1.txt</code>、<code>file2.txt</code>、<code>file3.txt</code>。</li></ul><p><strong>逻辑操作符</strong></p><ul><li><code>&amp;&amp;</code>：逻辑 AND，如果左边的命令成功执行（返回码为0），则执行右边的命令，例如 <code>command1 &amp;&amp; command2</code>。</li><li><code>||</code>：逻辑 OR，如果左边的命令执行失败（返回码非0），则执行右边的命令，例如 <code>command1 || command2</code>。</li></ul><p><strong>命令分隔符</strong></p><ul><li><code>;</code>：允许在单行中顺序执行多个命令，无论前一个命令执行成功与否，例如 <code>command1; command2</code>。</li><li><code>&amp;</code>：在后台运行命令，例如 <code>command &amp;</code>。</li></ul><p><strong>命令组合与子壳</strong></p><ul><li><code>{}</code>：命令组合，命令间用分号隔开，作为一个整体执行，需要在最后一个命令后也使用分号，例如 <code>{ command1; command2; }</code>。</li><li><code>()</code>：子壳(shell)，在子shell中执行命令，例如 <code>(command1; command2)</code>。</li></ul><p><strong>引用</strong></p><ul><li><code>&quot;</code>（双引号）：用于引用字符串，保留某些特殊字符（如变量 <code>$</code>、命令替换等）的特殊意义。</li><li><code>&#39;</code>（单引号）：用于精确引用字符串，内部所有字符均视为普通字符。</li><li><code>\\</code>（反斜杠）：转义字符，用于移除紧随其后的字符的特殊意义，如 <code>\\$</code> 表示美元符号本身，而不是变量的引导符。</li></ul><p><strong>输入/输出操作符</strong></p><ul><li><code>&gt;&gt;</code>：追加重定向，将输出追加到文件末尾而不是覆盖文件。</li><li><code>&lt;</code>：标准输入重定向，从文件或其他输入中读取数据。</li><li><code>&lt;&lt;&lt;</code>：Here字符串，将字符串重定向到命令的标准输入。</li></ul><h3 id="cat" tabindex="-1">Cat <a class="header-anchor" href="#cat" aria-label="Permalink to &quot;Cat&quot;">​</a></h3><p><strong>显示文件内容</strong>：</p><ul><li><p>要查看一个或多个文件的内容，可以使用</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令后跟文件名：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cat file1.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>也可以同时查看多个文件的内容：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cat file1.txt file2.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><p><strong>合并文件</strong>：</p><ul><li><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令可以用来合并多个文件的内容，并显示合并后的结果：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cat file1.txt file2.txt &gt; combined.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>这里，<code>file1.txt</code> 和 <code>file2.txt</code> 的内容被合并并重定向到新文件 <code>combined.txt</code> 中。</p></li></ul><p><strong>创建文件</strong>：</p><ul><li><p>可以使用</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令创建新文件：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cat &gt; newfile.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>输入此命令后，终端会等待用户输入。输入完成后，按 <code>Ctrl+D</code>（文件结束符）来保存输入到 <code>newfile.txt</code>。</p></li></ul><h3 id="硬盘信息" tabindex="-1">硬盘信息 <a class="header-anchor" href="#硬盘信息" aria-label="Permalink to &quot;硬盘信息&quot;">​</a></h3><p><strong><code>du</code></strong>：</p><ul><li>分析某个目录或文件的大小（如清理日志文件）。</li><li>找到占用磁盘空间最多的目录。</li></ul><p><strong><code>df</code></strong>：</p><ul><li>监控整个系统的磁盘使用情况（如查看分区剩余空间）。</li><li>确认挂载点是否接近满载。</li></ul><h1 id="操作系统" tabindex="-1">操作系统 <a class="header-anchor" href="#操作系统" aria-label="Permalink to &quot;操作系统&quot;">​</a></h1><h2 id="_1-死锁" tabindex="-1">1.死锁 <a class="header-anchor" href="#_1-死锁" aria-label="Permalink to &quot;1.死锁&quot;">​</a></h2><p><strong>采用“按序分配”策略可以破坏产生死锁的环路等待条件</strong>：正确。按序分配资源是一种避免死锁的方法。通过为资源分配一个全局顺序，确保进程只能按顺序申请资源，这样就能破坏“环路等待”这个死锁的必要条件。</p><p><strong>产生死锁的现象是每个进程等待着某个不能得到且不可释放的资源</strong>：正确。死锁的经典定义就是每个进程都在等待另一个进程持有的资源，而这些资源又不会被释放，从而形成一个循环等待的情况。</p><p><strong>在资源的动态分配过程中，防止系统进入安全状态，可避免发生死锁</strong>：错误。防止系统进入<strong>不安全状态</strong>才可以避免死锁。安全状态表示系统即使资源紧张，也能保证进程最终完成并释放资源，不会进入死锁。</p><p><strong>银行家算法是最有代表性的死锁解除算法</strong>：错误。<strong>银行家算法</strong>属于<strong>死锁避免</strong>算法，不是死锁解除算法。它通过检查资源分配的安全性，防止系统进入不安全状态，从而避免死锁的发生，而不是解除已经发生的死锁。</p><p>为了形成死锁，以下四个条件必须同时满足，这些条件通常被称为死锁的四个必要条件：</p><p>互斥（Mutual Exclusion）</p><ul><li><strong>定义</strong>：资源不能被多个进程共享，一次只能由一个进程使用。</li><li><strong>解释</strong>：如果一个资源可以被多个进程同时访问，那么互斥条件就不成立，因此不会出现因资源争夺导致的死锁。</li></ul><p>请求与保持（Hold and Wait）</p><ul><li><strong>定义</strong>：已经得到某些资源的进程可以请求新的资源。</li><li><strong>解释</strong>：进程至少已经保持了一个资源，并等待获取更多当前被其他进程持有的资源。</li></ul><p>不可剥夺（No Preemption）</p><ul><li><strong>定义</strong>：资源一旦被分配给一个进程，在该进程自愿释放资源之前，不能被强行剥夺。</li><li><strong>解释</strong>：系统无法强制进程释放它持有的资源，这使得其他进程可能会无限期地等待这个资源。</li></ul><p>循环等待（Circular Wait）</p><ul><li><strong>定义</strong>：存在一种进程资源的请求和分配模式，形成一个循环链，每个进程持有下一个进程所需要的至少一个资源。</li><li><strong>解释</strong>：每个进程至少持有一个资源，这个资源被链中的下一个进程所请求。因此，形成了一个封闭的循环，每个进程都在等待链中下一个进程持有的资源。</li></ul><h2 id="_2-进程" tabindex="-1">2.进程 <a class="header-anchor" href="#_2-进程" aria-label="Permalink to &quot;2.进程&quot;">​</a></h2><p>孤儿进程是指父进程退出后，仍然在运行的子进程，这些子进程会被 <code>init</code> 进程（或 <code>systemd</code>）收养并正常运行，不会对系统产生不良影响。</p><p>僵尸进程则是子进程已经退出，但父进程未通过 <code>wait</code> 或 <code>waitpid</code> 回收其状态，导致其进程表项（PID）仍然保留在系统中，占用系统资源。僵尸进程可能影响系统创建新的进程，因此应尽量避免，而孤儿进程不会产生类似问题。</p><h1 id="计算机网络" tabindex="-1">计算机网络 <a class="header-anchor" href="#计算机网络" aria-label="Permalink to &quot;计算机网络&quot;">​</a></h1><h2 id="_1" tabindex="-1">1. <a class="header-anchor" href="#_1" aria-label="Permalink to &quot;1.&quot;">​</a></h2><p>若将网络192.168.0.0/22划分为5个子网，则可以划分出的最小子网的子网掩码是</p><p>A、255.255.255.0</p><p>B、255.255.255.128</p><p>C、255.255.255.192</p><p>D、255.255.255.224</p><p>子网划分可分为定长子网和变长子网。题目说的最小，故应该是变长子网。</p><p>1.对于定长子网，从32-22=10位主机号中取3位，一共可以表示8个子网，符合条件。此时答案为B</p><p>2.对于变长子网。从大的子网向小的子网划分。</p><p>192.168.0.0/22</p><p>192.168.0.0/23,192.168.2.0/23</p><p>192.168.0.0/23,192.168.2.0/24,192.168.3.0/24</p><p>192.168.0.0/23,192.168.2.0/24,192.168.3.0/25,192.168.3.128/25</p><p>192.168.0.0/23,192.168.2.0/24,192.168.3.0/25,192.168.3.128/26,192.168.3.192/26</p><p>最后面那个是最小的子网，掩码为255.255.255.192</p><h2 id="osi" tabindex="-1">OSI <a class="header-anchor" href="#osi" aria-label="Permalink to &quot;OSI&quot;">​</a></h2><p>用于描述不同计算系统之间进行网络通信的各个层面。这个模型由国际标准化组织（ISO）在1984年提出，主要用于帮助不同系统之间进行互操作。OSI模型将网络通信过程分为七个层级，每一层都有其特定的功能和协议：</p><ol><li><strong>物理层（Layer 1 - Physical Layer）</strong><ul><li>负责在物理媒介上实现原始的比特流传输，涉及到电气、光学、和机械规格。它确保数据的物理传输。</li></ul></li><li><strong>数据链路层（Layer 2 - Data Link Layer）</strong><ul><li>负责在相连的节点之间创建逻辑连接，处理帧的寻址、错误检测和修正。例如，以太网（Ethernet）和Wi-Fi都工作在这一层。</li></ul></li><li><strong>网络层（Layer 3 - Network Layer）</strong><ul><li>负责在多个网络之间建立路径，并进行地址解析和路由选择。互联网协议（IP）是这一层的一个关键协议。</li></ul></li><li><strong>传输层（Layer 4 - Transport Layer）</strong><ul><li>负责为两个主机上的应用提供端到端的数据传输服务。这一层包括了如TCP（传输控制协议）和UDP（用户数据报协议）。</li></ul></li><li><strong>会话层（Layer 5 - Session Layer）</strong><ul><li>负责在数据传输中建立、管理和终止会话。这一层可以设置检查点，从而在通信失败时从上次成功的检查点恢复数据传送。</li></ul></li><li><strong>表示层（Layer 6 - Presentation Layer）</strong><ul><li>负责数据的表示、安全（加密）和压缩。这一层确保从一个系统发出的数据能被另一个系统的应用层正确解读。</li></ul></li><li><strong>应用层（Layer 7 - Application Layer）</strong><ul><li>为应用程序提供服务，并与应用程序直接交互。这一层涉及到一些高级的API，比如HTTP、FTP等。</li></ul></li></ol><h2 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;TCP&quot;">​</a></h2><p>（传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。它通过三次握手来建立连接，确保双方都准备好进行数据传输，并通过四次挥手来终止连接。下面详细解释这两个过程：</p><p>三次握手的目的是双方确认自身与对方的发送和接收是正常的。这一过程包括以下步骤：</p><ol><li><strong>SYN发送</strong>: <ul><li><strong>客户端</strong>发送一个SYN（同步序列编号）报文到<strong>服务器</strong>。此报文中含有客户端的初始序列号，用于同步序列号。</li><li>状态标记为 <strong>SYN</strong>。</li></ul></li><li><strong>SYN-ACK接收</strong>: <ul><li><strong>服务器</strong>收到SYN后，回送一个确认包（ACK）和它自己的同步包（SYN）。这个包含两个标志：<strong>SYN</strong>和<strong>ACK</strong>。</li><li>服务器的ACK号为客户端的初始序列号加一，表明服务器已经接收到客户端的SYN。</li></ul></li><li><strong>ACK发送</strong>: <ul><li><strong>客户端</strong>接收到服务器的SYN-ACK后，发送一个ACK包作为响应，确认号为服务器的序列号加一。</li><li>此时，客户端到服务器的连接已经建立。</li></ul></li></ol><p>四次挥手的目的是允许双方都能够终止已经建立的连接。这一过程涉及以下步骤：</p><ol><li><strong>FIN发送</strong>: <ul><li><strong>客户端</strong>决定关闭连接，发送一个FIN（结束）报文。</li><li>状态标记为 <strong>FIN</strong>。</li></ul></li><li><strong>ACK接收</strong>: <ul><li><strong>服务器</strong>接收到FIN后，发送一个ACK报文作为响应，并进入关闭等待状态。</li><li>服务器确认收到客户端的终止请求。</li></ul></li><li><strong>FIN发送</strong>: <ul><li>服务器完成向客户端的数据传输后，发送一个FIN给客户端，请求关闭连接。</li></ul></li><li><strong>ACK接收</strong>: <ul><li>客户端接收到服务器的FIN报文后，发送一个ACK报文作为响应，然后进入TIME-WAIT状态。客户端会等待足够的时间以确保服务器接收到其ACK报文，然后最终关闭连接。</li></ul></li></ol><h2 id="tcp和udp" tabindex="-1">TCP和UDP <a class="header-anchor" href="#tcp和udp" aria-label="Permalink to &quot;TCP和UDP&quot;">​</a></h2><p>是两种基本的传输层协议，它们在网络中扮演着至关重要的角色，但有着不同的特性和用途。以下是TCP和UDP的主要区别：</p><ol><li><strong>连接性</strong>: <ul><li><strong>TCP</strong> 是面向连接的协议。在数据开始传输之前，它需要在两个通信端点之间建立连接。这一过程涉及到“三次握手”，确保双方都准备好进行数据交换。</li><li><strong>UDP</strong> 是无连接的协议。它发送数据时不需要建立连接，因此可以直接发送数据包到目的地，无需事先协商。</li></ul></li><li><strong>可靠性</strong>: <ul><li><strong>TCP</strong> 提供可靠的服务。它通过序列号、确认响应（ACKs）、数据重传等机制确保数据的正确传输。如果数据包丢失或错误，TCP将重新发送该数据包。</li><li><strong>UDP</strong> 提供的是尽力而为的服务，不保证数据包的可靠送达。没有建立重传机制，如果数据包在传输过程中丢失，UDP不会尝试恢复。</li></ul></li><li><strong>数据完整性</strong>: <ul><li><strong>TCP</strong> 保证数据的顺序和完整性。如果接收到的数据片段是乱序的，TCP将重新排列成正确的顺序。</li><li><strong>UDP</strong> 不保证数据的顺序，接收到的数据顺序可能与发送顺序不同。</li></ul></li><li><strong>速度和效率</strong>: <ul><li><strong>TCP</strong> 由于其重传机制、顺序管理和较重的头部管理，其处理速度相比UDP要慢，但这是为了交换数据的完整性和可靠性。</li><li><strong>UDP</strong> 因为不进行错误检查和恢复，所以通常比TCP快，这在不需要每个数据包都完美到达的应用场景（如流媒体、实时游戏）中非常有用。</li></ul></li><li><strong>头部开销</strong>: <ul><li><strong>TCP</strong> 头部较大，最小为20字节，因为它需要携带更多的控制信息。</li><li><strong>UDP</strong> 的头部较小，固定8字节，这使得它在网络通信中的开销更小。</li></ul></li><li><strong>用例</strong>: <ul><li><strong>TCP</strong> 常用于需要高度可靠性的应用，如网页浏览、电子邮件和文件传输。</li><li><strong>UDP</strong> 常用于对实时性要求较高的应用，如视频和音频传输、在线游戏和广播通信。</li></ul></li></ol><p>TCP 是面向连接的，如打电话要先拨号建立连接：正确。TCP 是面向连接的协议，在传输数据之前，客户端和服务器需要通过三次握手建立连接，然后才能传输数据，类似于打电话前要先拨号连接对方。</p><p>TCP 支持一对一，一对多，多对一和多对多的交互通信：<strong>错误</strong>。TCP 通信是<strong>一对一</strong>的，即每个 TCP 连接仅有两个端点，无法直接支持一对多、多对一或多对多通信。多点通信通常使用 UDP 协议。</p><p>TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流：正确。TCP 是面向字节流的协议，它将数据视为一个连续的字节流，没有消息边界，数据可以按照任意大小分段传输。</p><p>UDP 是无连接的，即发送数据之前不需要建立连接：正确。UDP 是无连接协议，不需要建立连接就可以直接发送数据包。UDP 发送数据时不进行握手，因此传输效率较高，但不保证数据可靠到达。</p><h2 id="post-和-get" tabindex="-1">POST 和 GET <a class="header-anchor" href="#post-和-get" aria-label="Permalink to &quot;POST 和 GET&quot;">​</a></h2><p>GET请求通过URL（请求行）提交数据，在URL中可以看到所传参数。POST通过“请求体”传递数据，参数不会在url中显示。</p><p>GET请求提交的数据有长度限制，POST请求没有限制。</p><p>GET请求返回的内容可以被浏览器缓存起来。而每次提交的POST，浏览器在你按下F5的时候会跳出确认框，浏览器不会缓存POST请求返回的内容。</p><p>GET对数据进行查询，POST主要对数据进行增删改！简单说，GET是只读，POST是写。</p><p>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。</p><p>HTTP协议中提到GET是安全的方法，&quot;安全&quot; 并不意味着数据是加密或不容易被窃听，而是指<strong>该请求不会对服务器上的资源产生修改性影响</strong>。换句话说，使用 GET 方法的请求<strong>不应该有副作用</strong>，例如修改数据、更新资源等。</p><p>URL 使用的是 ASCII 编码格式。对于非 ASCII 字符，需要进行百分号编码（URL 编码）才能在 URL 中传输。</p><h3 id="get-方法" tabindex="-1">GET 方法 <a class="header-anchor" href="#get-方法" aria-label="Permalink to &quot;GET 方法&quot;">​</a></h3><p><strong>请注意，查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：</strong></p><p>/test/demo_form.php**?name1=value1&amp;name2=value2**</p><p><strong>有关 GET 请求的其他一些注释：</strong></p><ul><li>GET 请求可被缓存</li><li>GET 请求保留在浏览器历史记录中</li><li>GET 请求可被收藏为书签</li><li>GET 请求不应在处理敏感数据时使用</li><li>GET 请求有长度限制</li><li>GET 请求只应当用于取回数据</li><li>在HTTP规范中，没有对URL的长度和传输的数据大小进行限制。但是在实际开发过程中，对于GET，特定的浏览器和服务器对URL的长度有限制。因此，在使用GET请求时，传输数据会受到URL长度的限制。</li></ul><h3 id="post-方法" tabindex="-1">POST 方法 <a class="header-anchor" href="#post-方法" aria-label="Permalink to &quot;POST 方法&quot;">​</a></h3><p><strong>请注意，查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的：</strong></p><p>POST /test/demo_form.php HTTP/1.1 Host: runoob.com <strong>name1=value1&amp;name2=value2</strong></p><p><strong>有关 POST 请求的其他一些注释：</strong></p><ul><li>POST 请求不会被缓存</li><li>POST 请求不会保留在浏览器历史记录中</li><li>POST 不能被收藏为书签</li><li>POST 请求对数据长度没有要求</li><li>对于POST，由于不是URL传值，理论上是不会受限制的，但是实际上各个服务器会规定对POST提交数据大小进行限制，Apache、IIS都有各自的配置。</li></ul><h3 id="请求过程" tabindex="-1">请求过程 <a class="header-anchor" href="#请求过程" aria-label="Permalink to &quot;请求过程&quot;">​</a></h3><h4 id="post-请求过程" tabindex="-1">POST 请求过程 <a class="header-anchor" href="#post-请求过程" aria-label="Permalink to &quot;POST 请求过程&quot;">​</a></h4><ol><li><p><strong>TCP 三次握手</strong>：</p><ul><li><strong>第一次握手</strong>：浏览器发送 SYN 包请求建立连接。</li><li><strong>第二次握手</strong>：服务器回应 SYN-ACK 包。</li><li><strong>第三次握手</strong>：浏览器发送 ACK 包确认连接。</li></ul></li><li><p><strong>发送 POST 请求</strong>：</p><ul><li>浏览器发送 POST 请求头。如果请求头中包含 <code>Expect: 100-continue</code>，服务器会先返回 <code>100 Continue</code> 响应。</li></ul></li><li><p><strong>发送请求体</strong>：</p><ul><li>浏览器发送请求体数据。</li></ul></li><li><p><strong>服务器响应</strong>：</p><ul><li>服务器处理请求并返回 <code>200 OK</code> 或其他适当的响应状态码。</li></ul></li></ol><h4 id="get-请求过程" tabindex="-1">GET 请求过程 <a class="header-anchor" href="#get-请求过程" aria-label="Permalink to &quot;GET 请求过程&quot;">​</a></h4><ol><li><p><strong>TCP 三次握手</strong>：</p><ul><li>与 POST 请求相同。</li></ul></li><li><p><strong>发送 GET 请求</strong>：</p><ul><li>浏览器在第三次握手后立即发送 GET 请求头和任何必要的数据（通常没有请求体）。</li></ul></li><li><p><strong>服务器响应</strong>：</p><ul><li>服务器处理请求并返回 <code>200 OK</code> 和请求的资源。</li></ul></li></ol><p>其他注意事项</p><ul><li><strong>HTTP/1.1 和 HTTP/2</strong>：在 HTTP/1.1 中，<code>100 Continue</code> 是可选的，通常用于较大或不确定的请求体。在 HTTP/2 中，连接和数据传输方式有所优化。</li><li><strong>持久连接</strong>：HTTP/1.1 默认使用持久连接，可以复用同一个 TCP 连接进行多个请求。</li></ul><p>这些步骤确保了浏览器和服务器之间的可靠通信。</p><h3 id="_2msl" tabindex="-1">2MSL <a class="header-anchor" href="#_2msl" aria-label="Permalink to &quot;2MSL&quot;">​</a></h3><p>在TCP连接的关闭过程中，主动关闭的一方在发送完最后一个ACK后进入TIME_WAIT状态。这个状态的持续时间是2倍的MSL（Maximum Segment Lifetime），即2MSL。</p><p>为什么需要2MSL？</p><ol><li><p><strong>数据包在网络中的传播延迟</strong>：</p><ul><li>TCP需要确保在网络中可能存在的所有旧数据包都被安全丢弃。MSL是指一个TCP段在网络中可以存在的最长时间。2MSL保证即使在最坏情况下（数据包绕行网络），所有旧数据包都已经过期。</li></ul></li><li><p><strong>可靠的连接终止</strong>：</p><ul><li>当主动关闭方发送最后的ACK确认对方的FIN时，可能ACK会丢失。等待2MSL确保对方有足够的时间重传FIN，并且主动关闭方可以再次发送ACK。</li></ul></li><li><p><strong>避免端口重用冲突</strong>：</p><ul><li>在TIME_WAIT状态期间，TCP连接的端口对（源IP地址、源端口、目的IP地址、目的端口）被占用。等待2MSL时间可以防止新连接重用相同的端口对，从而避免旧连接的数据包干扰新连接。</li></ul></li></ol><p>TIME_WAIT状态的过程</p><ol><li><p><strong>发送FIN</strong>：</p><ul><li>主动关闭方发送FIN报文段，进入FIN_WAIT_1状态。</li></ul></li><li><p><strong>收到FIN的ACK</strong>：</p><ul><li>收到对方的ACK后，进入FIN_WAIT_2状态。</li></ul></li><li><p><strong>收到对方的FIN</strong>：</p><ul><li>收到对方的FIN后，发送ACK并进入TIME_WAIT状态。</li></ul></li><li><p><strong>等待2MSL时间</strong>：</p><ul><li>在TIME_WAIT状态中，连接将保持2MSL时间。</li><li>这段时间结束后，连接资源可以被释放。</li></ul></li></ol><p>实际影响</p><ul><li><strong>资源占用</strong>：长时间的TIME_WAIT会占用系统资源（如文件描述符），特别是在高负载的服务器上。</li><li><strong>优化措施</strong>：一些操作系统提供了优化选项，如TCP端口重用或缩短TIME_WAIT时间，但这些优化需要谨慎使用，以避免潜在的连接问题。</li></ul><p>通过2MSL机制，TCP协议能够更可靠地管理连接的关闭过程，确保数据完整性和连接安全性。</p><h2 id="什么是广播地址" tabindex="-1">什么是广播地址 <a class="header-anchor" href="#什么是广播地址" aria-label="Permalink to &quot;什么是广播地址&quot;">​</a></h2><p>广播地址是一个网络范围内的最后一个 IP 地址。它用于将数据包发送到网络中的所有主机。广播地址的计算规则是：将网络地址的主机部分全部置为 <strong>1</strong>。</p><p><strong>理解 192.168.0.0/22 的范围</strong></p><ul><li><p><strong>192.168.0.0/22</strong> 表示一个 22 位的子网掩码。子网掩码的二进制表示为：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>11111111.11111111.11111100.00000000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对应的十进制子网掩码是 <strong>255.255.252.0</strong>。</p></li><li><p>22 位掩码意味着前 22 位用于标识网络，剩下的 10 位用于标识主机。因此，在 <strong>192.168.0.0/22</strong> 网络中，主机部分有 10 位。</p></li></ul><p><strong>计算 IP 地址范围</strong></p><p>要计算 IP 地址范围，首先需要确定网络地址和广播地址：</p><ul><li><p><strong>网络地址</strong>：是 IP 地址的最小值，主机部分全为 0。因此 <strong>192.168.0.0/22</strong> 的网络地址是 <strong>192.168.0.0</strong>。</p></li><li><p><strong>广播地址</strong>：是 IP 地址范围的最大值，主机部分全为 1。要计算广播地址，可以通过将主机部分的 10 位全置为 1。</p><p>主机部分的 10 位全为 1：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1111111111</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转换为十进制，这相当于 <strong>1023</strong>，也就是说，从网络地址 <strong>192.168.0.0</strong> 开始，加上 <strong>1023</strong> 就得到广播地址。</p><p>所以，广播地址为：</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">192.168.0.0 + 1023 = 192.168.3.255</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><p>广播地址是用于向同一子网内的所有设备发送消息的地址。它的作用是让同一网络中的所有设备都能接收到该数据包。广播地址是在一个网络中主机地址部分全部为二进制1的地址。</p><p>网络地址是用于标识一个子网的地址，它表示该子网中的所有设备所共有的前缀部分。网络地址的主机部分全为二进制0。在IP地址划分中，网络地址用来区分不同的网络，且不能作为主机地址使用。</p><h3 id="子网的数量必须是-2-的幂" tabindex="-1">子网的数量必须是 2 的幂 <a class="header-anchor" href="#子网的数量必须是-2-的幂" aria-label="Permalink to &quot;子网的数量必须是 2 的幂&quot;">​</a></h3><p>IP 地址是 32 位二进制数，划分子网时，子网掩码决定了多少位用来标识网络和子网，剩余的位数用于标识主机。当你从主机位借用一些位给子网时，这些位的组合数决定了子网的数量。</p><p>举个例子：</p><ul><li>假设你有一个 <strong>/24</strong> 的网络，子网掩码是 <strong>255.255.255.0</strong>，其中前 24 位用于表示网络地址，剩余的 8 位用于主机。</li><li>如果你想划分子网，你可以从主机位中“借用”一些位用作子网编号。</li></ul><p>例如：</p><ul><li>借用 <strong>1 位</strong>：2^1 = 2 个子网</li><li>借用 <strong>2 位</strong>：2^2 = 4 个子网</li><li>借用 <strong>3 位</strong>：2^3 = 8 个子网</li></ul><p>这种借位方式基于二进制系统，因此子网的数量只能是 <strong>2 的幂</strong>，因为每增加一位子网位数，都会将子网的数量翻倍。</p><h2 id="常用的网络端口" tabindex="-1">常用的网络端口 <a class="header-anchor" href="#常用的网络端口" aria-label="Permalink to &quot;常用的网络端口&quot;">​</a></h2><p><strong>20/21 - FTP (File Transfer Protocol)</strong></p><p>20端口用于FTP的数据传输，21端口用于控制信息的交换。</p><p><strong>22 - SSH (Secure Shell)</strong></p><p>用于安全地访问远程计算机，也常用于端口转发。</p><p><strong>23 - Telnet</strong></p><p>用于未加密的文本通信，现在已经大多被更安全的SSH所替代。</p><p><strong>25 - SMTP (Simple Mail Transfer Protocol)</strong></p><p>用于电子邮件的发送。</p><p><strong>53 - DNS (Domain Name System)</strong></p><p>用于解析域名到IP地址。</p><p><strong>80 - HTTP (Hypertext Transfer Protocol)</strong></p><p>用于传输Web页面。</p><p><strong>110 - POP3 (Post Office Protocol version 3)</strong></p><p>用于接收电子邮件。</p><p><strong>143 - IMAP (Internet Message Access Protocol)</strong></p><p>用于访问和管理电子邮件。</p><p><strong>443 - HTTPS (HTTP Secure)</strong></p><p>用于安全的Web浏览，加密HTTP协议以提供安全性。</p><p><strong>445 - SMB (Server Message Block)</strong></p><p>用于Windows网络文件共享和打印服务。</p><p><strong>993 - IMAP over SSL (IMAPS)</strong></p><p>用于通过SSL安全地连接到IMAP服务器。</p><p><strong>995 - POP3 over SSL (POP3S)</strong></p><p>用于通过SSL安全地连接到POP3服务器。</p><p><strong>1433 - SQL Server</strong></p><p>微软SQL Server数据库管理系统使用的端口。</p><p><strong>1521 - Oracle Database</strong></p><p>Oracle数据库通信使用的端口。</p><p><strong>3306 - MySQL</strong></p><p>MySQL数据库服务使用的端口。</p><p><strong>3389 - RDP (Remote Desktop Protocol)</strong></p><p>用于Windows远程桌面连接。</p><p><strong>5432 - PostgreSQL</strong></p><p>PostgreSQL数据库使用的端口。</p><p><strong>6379 - Redis</strong></p><p>Redis键值存储数据库使用的端口。</p><p><strong>27017 - MongoDB</strong></p><p>MongoDB NoSQL数据库使用的端口。</p><h1 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h1><h2 id="_1-1" tabindex="-1">1. <a class="header-anchor" href="#_1-1" aria-label="Permalink to &quot;1.&quot;">​</a></h2><p>若一序列进栈顺序为a1,a2,a3,a4，问存在多少种可能的出栈序列</p><p><img src="'+p+`" alt="image-20240919210651650" loading="lazy"></p><p>卡特兰数，相关问题还有：已知前序遍历的顺序是xxxx求这棵树有多少种形状</p><h2 id="_2" tabindex="-1">2. <a class="header-anchor" href="#_2" aria-label="Permalink to &quot;2.&quot;">​</a></h2><p>把14,27,71,50,93,39按顺序插入一棵树,插入的过程不断调整使树为平衡排序二叉树,最终形成平衡排序二叉树高度为？并且画出对应过程。</p><p>我们需要按照给定的顺序将数字插入到AVL树中，并在每次插入后进行必要的平衡调整。AVL树是一种自平衡二叉搜索树，确保任何节点的左右子树高度差不超过1。</p><p><strong>插入过程：</strong></p><ol><li><p>插入14：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>14</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>树的高度：1</li><li>无需调整。</li></ul></li><li><p>插入27：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  14</span></span>
<span class="line"><span>    \\</span></span>
<span class="line"><span>    27</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>树的高度：2</li><li>计算平衡因子(BF)：BF(14) = 0 - 1 = -1</li><li>无需调整。</li></ul></li><li><p>插入71：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  14</span></span>
<span class="line"><span>    \\</span></span>
<span class="line"><span>    27</span></span>
<span class="line"><span>      \\</span></span>
<span class="line"><span>      71</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>树的高度：3</li><li>计算BF(14) = 0 - 2 = -2（不平衡）</li><li>这是一个右-右情况，需对节点14进行左旋。</li></ul><p>左旋后：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    27</span></span>
<span class="line"><span>   /  \\</span></span>
<span class="line"><span>  14  71</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>更新高度，树的高度：2</li><li>所有节点平衡。</li></ul></li><li><p>插入50：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    27</span></span>
<span class="line"><span>   /  \\</span></span>
<span class="line"><span>  14  71</span></span>
<span class="line"><span>      /</span></span>
<span class="line"><span>     50</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>树的高度：3</li><li>计算BF(27) = 1 - 2 = -1</li><li>无需调整。</li></ul></li><li><p>插入93：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    27</span></span>
<span class="line"><span>   /  \\</span></span>
<span class="line"><span>  14  71</span></span>
<span class="line"><span>      / \\</span></span>
<span class="line"><span>     50 93</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>树的高度：3</li><li>计算BF(27) = 1 - 2 = -1</li><li>无需调整。</li></ul></li><li><p>插入39：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    27</span></span>
<span class="line"><span>   /  \\</span></span>
<span class="line"><span>  14  71</span></span>
<span class="line"><span>      / \\</span></span>
<span class="line"><span>     50 93</span></span>
<span class="line"><span>    /</span></span>
<span class="line"><span>   39</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>树的高度：4</li><li>计算BF(27) = 1 - 3 = -2（不平衡）</li><li>这是一个右-左情况，需要先对节点71进行右旋，再对节点27进行左旋。</li></ul><p>右旋节点71后：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    27</span></span>
<span class="line"><span>   /  \\</span></span>
<span class="line"><span>  14  50</span></span>
<span class="line"><span>      /  \\</span></span>
<span class="line"><span>     39  71</span></span>
<span class="line"><span>           \\</span></span>
<span class="line"><span>           93</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>左旋节点27后：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>     50</span></span>
<span class="line"><span>    /  \\</span></span>
<span class="line"><span>   27  71</span></span>
<span class="line"><span>  / \\    \\</span></span>
<span class="line"><span> 14 39   93</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>更新高度，树的高度：3</li><li>所有节点平衡。</li></ul></li></ol><p>最终AVL树高度为3。</p><p>树的高度（Height of a Tree）</p><ul><li><strong>定义</strong>：树的高度是指<strong>树中节点的最大层次（层数）</strong>。换句话说，就是从根节点到叶子节点的最长路径所经过的<strong>节点数</strong>。</li><li><strong>计算方法</strong>：从根节点开始，根节点所在的层数为1，每向下经过一个节点，层数加1。</li></ul><p>树的深度（Depth of a Tree）</p><ul><li><strong>定义</strong>：树的深度通常指的是<strong>树中节点的最大深度</strong>，即从根节点到最深叶子节点所经过的<strong>边数</strong>。</li><li><strong>计算方法</strong>：从根节点开始，根节点的深度为0，每向下经过一条边，深度加1。</li></ul><p><strong>二叉搜索树基本性质：</strong></p><ol><li><strong>二叉搜索树的性质：</strong><ul><li><strong>左子树</strong>中所有节点的值均小于<strong>根节点</strong>的值。</li><li><strong>右子树</strong>中所有节点的值均大于<strong>根节点</strong>的值。</li><li>左、右子树也分别是二叉搜索树。</li></ul></li><li><strong>平衡条件：</strong><ul><li><strong>平衡因子（Balance Factor）</strong>：对于每个节点，<strong>左子树高度</strong>与<strong>右子树高度</strong>之差的绝对值不超过某个特定值（例如，在 AVL 树中，平衡因子的绝对值不超过 1）。</li></ul></li></ol><h1 id="安全" tabindex="-1">安全 <a class="header-anchor" href="#安全" aria-label="Permalink to &quot;安全&quot;">​</a></h1><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><p>Mimikatz 是一个强大的工具，可以从内存中抓取Windows登录密码和哈希值。</p><p>Pwdump7 是一个工具，专门用于从Windows系统中导出密码哈希。</p><p>sqlmap 是用于SQL注入的工具，主要针对数据库，不是专门用于抓取Windows登录密码。 hashcat 是一个密码破解工具，用于暴力破解密码或哈希值，但不是抓取密码的工具。</p><p>wevtutil：<code>wevtutil</code> 是 Windows 提供的一个命令行工具，可以用来查询、导出和管理 Windows 事件日志，包括安全日志。</p><p>eventquery.vbs：这是一个旧的脚本工具，虽然较为过时，但它也可以用来查询 Windows 事件日志，包括安全日志。</p><p>systeminfo：<code>systeminfo</code> 是用于查看系统信息的命令，如操作系统版本、补丁、启动时间等，不能用于查看事件日志。</p><p>dsquery：<code>dsquery</code> 是一个 Active Directory 查询工具，用于查询 AD 对象，不能用于查看事件日志。</p><p>sleep()：<code>sleep()</code> 函数在 SQL 注入中非常常见，它用于使 SQL 查询延迟执行指定的时间。例如，<code>sleep(5)</code> 将延迟 5 秒。</p><p>benchmark：<code>benchmark()</code> 函数会执行指定次数的操作，用于测试性能或在 SQL 注入中制造延迟。例如，<code>benchmark(1000000, md5(&#39;test&#39;))</code> 通过大量计算延迟查询执行。</p><p>pthread_join：这是 C/C++ 多线程编程中的函数，不是 MySQL 的延时函数。</p><p>Burpsuite 是一款用于渗透测试的综合性工具，可以拦截、修改和分析 HTTP/HTTPS 数据包，非常适合用来抓取和修改 HTTP 数据包。</p><p>Fiddler 是一个专门用于调试 HTTP 和 HTTPS 通信的工具，能够拦截和查看 HTTP 数据包，广泛应用于网络分析和应用调试。、</p><p>Hackbar 是浏览器插件，主要用于帮助执行各种常见的安全测试操作，如 XSS 和 SQL 注入，但它不具备拦截或抓取 HTTP 数据包的功能。</p><p>Nmap 是网络扫描工具，主要用于端口扫描、网络探索等，不是用于抓取 HTTP 数据包的工具。</p><h3 id="反编译工具" tabindex="-1">反编译工具 <a class="header-anchor" href="#反编译工具" aria-label="Permalink to &quot;反编译工具&quot;">​</a></h3><p>Java 反编译工具</p><ul><li><strong>JD-GUI</strong>: 易于使用的图形界面工具，能够快速将Java字节码反编译成源代码。</li><li><strong>CFR</strong>: 支持Java 14及以上版本的Java字节码反编译器，具有高度的复原准确性。</li><li><strong>Procyon</strong>: 在处理Java 8的lambda表达式等较新特性上表现良好的反编译工具。</li><li><strong>Fernflower</strong>: IntelliJ IDEA 集成的反编译器，广泛用于在IDE中直接反编译类文件。</li></ul><p>.NET 反编译工具</p><ul><li><strong>ILSpy</strong>: 开源.NET程序集浏览器和反编译器，可以处理C#代码。</li><li><strong>dnSpy</strong>: 集反编译和调试功能于一体的工具，特别适合分析和修改.NET程序。</li><li><strong>JustDecompile</strong>: 免费且功能强大的.NET反编译工具，提供插件支持和频繁的更新。</li></ul><p>C/C++ 反编译工具</p><ul><li><strong>IDA Pro</strong> (Interactive DisAssembler): 带有Hex-Rays反编译器的强大反汇编和反编译平台，支持多种架构。</li><li><strong>Ghidra</strong>: 美国国家安全局开发的开源软件逆向工程工具，支持多种语言和平台。</li><li><strong>Hopper Disassembler</strong>: 针对Mac和Linux的反编译工具，可以生成近似C代码的伪代码。</li></ul><p>Android 反编译工具</p><ul><li><strong>APKTool</strong>: 解包和重打包Android APKs的工具，常用于资源解析和修改。</li><li><strong>JADX</strong>: 无需Java SDK即可反编译DEX到Java源代码的工具，支持命令行和GUI界面。</li><li><strong>Bytecode Viewer</strong>: 集成多个反编译器和反汇编器的Android逆向工程工具。</li></ul><p>其他平台的反编译工具</p><ul><li><strong>Binary Ninja</strong>: 适用于专业人士的低级分析平台，提供逻辑图和伪代码。</li><li><strong>Radare2</strong>: 开源的逆向工程框架，支持广泛的架构和文件类型，包括用于逆向的反编译插件。</li></ul><h2 id="知识-1" tabindex="-1">知识 <a class="header-anchor" href="#知识-1" aria-label="Permalink to &quot;知识&quot;">​</a></h2><p>AES (Advanced Encryption Standard)</p><ul><li><strong>类型</strong>: 对称加密算法</li><li>特点 <ul><li>AES是由美国国家标准与技术研究院（NIST）于2001年发布的对称加密标准。</li><li>它使用相同的密钥来进行加密和解密。</li><li>密钥长度可为128位、192位或256位，因此它的安全性和效率非常高。</li><li>AES广泛应用于商业和政府系统中的数据加密。</li></ul></li></ul><p>DES (Data Encryption Standard)</p><ul><li><strong>类型</strong>: 对称加密算法</li><li>特点 <ul><li>DES是1977年由NIST发布的对称加密标准，已经过时。</li><li>它使用56位密钥来加密数据，安全性较低，容易被暴力破解。</li><li>DES在许多场景中被AES取代，但它在历史上有重要意义，是早期的加密标准。</li></ul></li></ul><p>RSA (Rivest-Shamir-Adleman)</p><ul><li><strong>类型</strong>: 非对称加密算法</li><li>特点 <ul><li>RSA是一种非对称加密算法，使用公钥和私钥对来加密和解密数据。</li><li>公钥用于加密，私钥用于解密。</li><li>RSA的安全性基于大数分解问题，它广泛用于安全通信，如HTTPS、数字签名和证书。</li><li>密钥长度通常为2048位或更长，以确保足够的安全性。</li></ul></li></ul><p>对称加密</p><ul><li><strong>定义</strong>: 对称加密算法使用相同的密钥进行加密和解密。</li><li>特点 <ul><li>速度较快，适合对大数据量的加密。</li><li>主要的挑战在于安全地分发密钥，因为如果密钥泄露，通信内容将不再安全。</li></ul></li><li><strong>常见算法</strong>: AES、DES、3DES等。</li></ul><p>非对称加密</p><ul><li><strong>定义</strong>: 非对称加密算法使用一对密钥——公钥和私钥。公钥用于加密，私钥用于解密。</li><li>特点 <ul><li>公钥可以公开，而私钥需要保密。</li><li>安全性较高，适合在互联网等不安全环境下使用。</li><li>计算复杂度较高，因此速度较慢，通常用于加密较小的数据或密钥交换。</li></ul></li><li><strong>常见算法</strong>: RSA、ECC（椭圆曲线加密）、DSA等。</li></ul><p>窃听：属于被动攻击，攻击者监听网络通信中的数据，不改变数据内容，目的收集信息。</p><p>流量分析：也是被动攻击，通过分析网络流量模式、通信量等，获取系统行为或用户活动的线索，不直接破坏系统。</p><p>SQL注入攻击：属于主动攻击，攻击者通过恶意输入破坏或控制数据库。</p><p>暴力破解：也是主动攻击，攻击者尝试通过暴力尝试密码等方式来获取对系统的访问权限。</p><h3 id="xss" tabindex="-1">XSS <a class="header-anchor" href="#xss" aria-label="Permalink to &quot;XSS&quot;">​</a></h3><p>**反射型XSS **是比较常见和广泛的一类，举例来说，当一个网站的代码中包含类似下面的语句：<code>&lt;?php echo &quot;&lt;p&gt;hello, $_GET[&#39;user&#39;]&lt;/p&gt;&quot;;?&gt;</code> ，那么在访问时设置 <code>/?user=&lt;/p&gt;&lt;script&gt;alert(&quot;hack&quot;)&lt;/script&gt;&lt;p&gt;</code> ，则可执行预设好的JavaScript代码。</p><p>反射型XSS通常出现在搜索等功能中，需要被攻击者点击对应的链接才能触发，且受到XSS Auditor、NoScript等防御手段的影响较大。</p><p><strong>储存型XSS</strong> 相比反射型来说危害较大，在这种漏洞中，攻击者能够把攻击载荷存入服务器的数据库中，造成持久化的攻击。例如在网站评论区提交xss代码。</p><p>**DOM型XSS **不同之处在于DOM型XSS一般和服务器的解析响应没有直接关系，而是在JavaScript脚本动态执行的过程中产生的。</p><h1 id="python" tabindex="-1">Python <a class="header-anchor" href="#python" aria-label="Permalink to &quot;Python&quot;">​</a></h1><h2 id="三元表达式" tabindex="-1">三元表达式 <a class="header-anchor" href="#三元表达式" aria-label="Permalink to &quot;三元表达式&quot;">​</a></h2><p>Python 中没有 x&gt;y?a:b 形式的三元表达式，但可以使用以下形式实现</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> true_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> false_value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="赋值" tabindex="-1">赋值 <a class="header-anchor" href="#赋值" aria-label="Permalink to &quot;赋值&quot;">​</a></h2><p>下列哪个语句在Python中是非法的（ ）</p><p>A x = y = z = 1</p><p>B x = (y = z + 1)</p><p>C x, y = y, x</p><p>D x += y</p><p>多重赋值：x=y=z=1</p><p>多元赋值：x,y,z=1,3,&#39;a string&#39;</p><p>增量赋值：x+=1</p><p>但是 B 非法，因为将 <code>x = (y = z + 1)</code> 中右半部分括起来后，相当于把一个赋值表达式赋值给变量 <code>x</code>，因此出现语法错误。</p><p>正确的赋值语法应把括号去掉，即：x = y = z + 1 。这种赋值方式可称为连续赋值。</p><p>计算顺序是从右向左，表达式 <code>x = y = z + 1</code> 的运算顺序如下：</p><ol><li>首先计算 <code>z + 1</code>。</li><li>将计算结果赋值给 <code>y</code>。</li><li>然后将同一个结果赋值给 <code>x</code>。</li></ol><p>这意味着 <code>x</code> 和 <code>y</code> 都会得到 <code>z + 1</code> 的值。</p><h2 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Child1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Child2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Parent()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Child1()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Child2()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.x, c1.x, c2.x)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：1 1 1（访问类变量）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Child1.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.x, c1.x, c2.x)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：1 2 1（访问修改后的类变量）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.x, c1.x, c2.x)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：4 2 1（p 实例有自己的 x 属性）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Parent.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.x, c1.x, c2.x)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：4 2 3（p 实例的 x 不变，c1 和 c2 继续遵循类变量规则）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ul><li><strong>实例化后，每个实例有自己的命名空间</strong>：修改实例变量不会影响类变量或其他实例。</li><li><strong>类变量的修改仍影响未覆盖的实例</strong>：如果实例没有独立的 <code>x</code> 属性，它会继续引用类变量。</li></ul><p><strong>总结</strong>：实例化后，实例的行为会依赖于具体的变量访问优先级（实例变量优先于类变量），因此结果会有所不同。</p><h3 id="单例" tabindex="-1">单例 <a class="header-anchor" href="#单例" aria-label="Permalink to &quot;单例&quot;">​</a></h3><p>在 Python 中，单例（Singleton）是一种设计模式，确保一个类只有一个实例，并提供一个全局访问点。换句话说，单例模式限制了类的实例化，使得在整个应用程序中只存在一个实例。</p><h4 id="单例模式的实现" tabindex="-1">单例模式的实现 <a class="header-anchor" href="#单例模式的实现" aria-label="Permalink to &quot;单例模式的实现&quot;">​</a></h4><p>有多种方法可以在 Python 中实现单例模式，以下是几种常见的方法：</p><p>方法 1：使用类变量</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __new__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cls, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._instance:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Singleton, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__new__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._instance</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>方法 2：使用装饰器</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cls):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    instances </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instances:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            instances[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instances[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_instance</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@singleton</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>在 Python 中，模块本身就是单例的，因为模块在首次导入时只会被执行一次。因此，可以将需要单例的功能放在模块中。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># singleton_module.py</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">singleton_instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>然后在其他地方导入这个模块即可：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singleton_module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singleton_instance</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singleton_instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singleton_instance</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>单例模式在某些情况下非常有用，比如需要控制资源访问、管理全局状态或配置时。然而，过度使用单例可能导致代码难以测试和维护，因此在使用时应谨慎考虑。</p><h3 id="魔术方法" tabindex="-1">魔术方法 <a class="header-anchor" href="#魔术方法" aria-label="Permalink to &quot;魔术方法&quot;">​</a></h3><p>在Python中，魔法方法（也称为特殊方法或双下划线方法）是具有特殊用途的内置方法。它们通常用于实现某些操作符的行为或对象的协议。以下是一些常见的魔法方法：</p><ol><li><p><strong>__init__</strong>: 构造函数，用于初始化对象。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><code>__new__</code> 必须返回一个类的实例。通常是通过调用 <code>super().__new__(cls)</code> 来实现，如果 <code>__new__</code> 返回类的实例，则调用 <code>__init__</code> 方法进行初始化。接受类本身 <code>cls</code> 作为第一个参数，其后参数与 <code>__init__</code> 相同。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __new__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cls, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Creating instance&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__new__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Initializing instance&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyClass(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p><strong>__str__</strong>: 返回对象的可读字符串表示。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __str__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyClass with value </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>__repr__</strong>: 返回对象的官方字符串表示，通常用于调试。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __repr__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyClass(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>__add__</strong>: 实现加法运算符 <code>+</code>。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __add__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, other):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyClass(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> other.value)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><strong>__len__</strong>: 返回对象的长度。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __len__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>__getitem__</strong>: 支持索引访问。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, items):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __getitem__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, index):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items[index]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><strong>__setitem__</strong>: 支持索引赋值。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, items):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __setitem__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, index, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items[index] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><strong>__eq__</strong>: 实现等于运算符 <code>==</code>。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __eq__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, other):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> other.value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ol><p>这些魔法方法使得自定义对象可以像内置对象一样使用，提供了很大的灵活性和可扩展性。</p><h3 id="super" tabindex="-1">super <a class="header-anchor" href="#super" aria-label="Permalink to &quot;super&quot;">​</a></h3><p>在 Python 中，<code>super().__init__(map)</code> 和 <code>super(RegexConverter, self).__init__(map)</code> 都用于调用父类的构造函数，但它们有一些细微的区别：</p><ol><li><p><strong>Python 版本</strong>:</p><ul><li><code>super().__init__(map)</code> 是 Python 3 的简化语法，直接调用父类方法。</li><li><code>super(RegexConverter, self).__init__(map)</code> 是 Python 2 中常用的语法，在 Python 3 中也可以使用。</li></ul></li><li><p><strong>可读性</strong>:</p><ul><li><code>super().__init__(map)</code> 更简洁，推荐在 Python 3 中使用。</li><li><code>super(RegexConverter, self).__init__(map)</code> 明确指定类和实例，可能更易于理解在复杂继承结构中的调用顺序。</li></ul></li><li><p><strong>使用场景</strong>:</p><ul><li>在 Python 3 中，通常使用 <code>super()</code>，因为它更简洁且不容易出错。</li><li>在 Python 2 中，必须使用 <code>super(RegexConverter, self)</code> 这种形式。</li></ul></li></ol><p>在现代 Python 代码中，推荐使用 <code>super()</code> 的简化形式。</p><h3 id="类变量" tabindex="-1">类变量 <a class="header-anchor" href="#类变量" aria-label="Permalink to &quot;类变量&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, name, species):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.species </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> species</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Some generic sound&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在这段代码中，<code>name</code> 和 <code>_name</code> 有以下区别：</p><ol><li><p><strong><code>name</code> (类属性)</strong>:</p><ul><li>定义在类体中，作为类属性。所有实例共享这个属性。</li><li>在 <code>__init__</code> 中，<code>self.name = name</code> 会将实例的 <code>name</code> 属性覆盖类属性。</li></ul></li><li><p><strong><code>_name</code> (类属性)</strong>:</p><ul><li>同样定义在类体中，作为类属性，带有前导下划线，表示这是一个“受保护的”属性。</li><li>在 <code>__init__</code> 中，<code>self._name = name</code> 会将实例的 <code>_name</code> 属性覆盖类属性。</li></ul></li><li><p><strong><code>self.name</code> 和 <code>self._name</code> (实例属性)</strong>:</p><ul><li>在 <code>__init__</code> 方法中，通过 <code>self</code> 赋值，创建实例属性。这些属性是每个实例独有的。</li></ul></li></ol><p>使用 <code>@property</code></p><p>你可以使用 <code>@property</code> 来控制对 <code>name</code> 或 <code>_name</code> 的访问和修改。例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, name, species):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.species </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> species</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @name.setter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 这里可以加入额外的逻辑，比如验证</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Some generic sound&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建一个 Animal 实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Animal(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Buddy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问 name 属性（调用 @property）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dog.name)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Buddy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改 name 属性（调用 @name.setter）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dog.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Max&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 再次访问 name 属性</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dog.name)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Max</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用 make_sound 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dog.make_sound()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Some generic sound</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>在这个例子中：</p><ul><li><code>@property</code> 装饰器将 <code>name</code> 方法变成一个只读属性。</li><li><code>@name.setter</code> 允许你定义一个设置器方法，以便在设置 <code>name</code> 属性时执行额外的逻辑。</li></ul><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><h3 id="传参" tabindex="-1">传参 <a class="header-anchor" href="#传参" aria-label="Permalink to &quot;传参&quot;">​</a></h3><p>以下是一些关于 <code>*args</code> 和 <code>**kwargs</code> 的更多用法和知识点：</p><ol><li><code>*args</code> 和 <code>**kwargs</code> 的基本用法</li></ol><ul><li><code>*args</code> 用于传递不定数量的位置参数。</li><li><code>**kwargs</code> 用于传递不定数量的关键字参数。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;args:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kwargs:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>解包</li></ol><ul><li>使用 <code>*</code> 解包列表或元组。</li><li>使用 <code>**</code> 解包字典。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">params))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="3"><li>强制关键字参数</li></ol><ul><li>使用 <code>*</code> 强制后续参数必须作为关键字参数传递。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">func(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 正确</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="4"><li>组合使用</li></ol><ul><li>可以在同一个函数中同时使用位置参数、<code>*args</code>、关键字参数、<code>**kwargs</code>。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> complex_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;args:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, c)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kwargs:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">complex_function(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="5"><li>参数顺序</li></ol><ul><li>参数顺序为：位置参数、<code>*args</code>、默认参数、<code>**kwargs</code>。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ordered_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b, args, d, kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ordered_function(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="6"><li>实际应用</li></ol><ul><li>在装饰器中，<code>*args</code> 和 <code>**kwargs</code> 可以用于处理不定数量的输入参数。</li><li>在函数重载场景中，它们可以用于灵活地处理不同数量和类型的参数。</li></ul><p>这些用法可以帮助你更灵活地设计函数，处理各种参数传递场景。</p><h3 id="解包" tabindex="-1">解包 <a class="header-anchor" href="#解包" aria-label="Permalink to &quot;解包&quot;">​</a></h3><p>当然，关于 <code>*</code> 解包，有以下几个知识点：</p><ol><li>列表和元组解包</li></ol><p>可以使用 <code>*</code> 将列表或元组解包为单独的元素：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 1 2 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>函数调用中的解包</li></ol><p>在函数调用时，可以使用 <code>*</code> 解包列表或元组，将其元素作为位置参数传递：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, z):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nums </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nums))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="3"><li>字典解包</li></ol><p>使用 <code>**</code> 可以将字典解包为关键字参数：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> display_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, age):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, Age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">display_info(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">info)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Name: Alice, Age: 30</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="4"><li>合并列表和字典</li></ol><p>可以利用解包操作符合并列表和字典：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">combined_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list2]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(combined_list)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [1, 2, 3, 4, 5, 6]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dict1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dict2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">combined_dict </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dict1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dict2}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(combined_dict)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="5"><li>解包可迭代对象</li></ol><p><code>*</code> 可以用于解包任意可迭代对象，例如字符串、集合等：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: h e l l o</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这些解包技巧可以帮助你更灵活地处理数据结构和函数参数。</p><h2 id="列表" tabindex="-1">列表 <a class="header-anchor" href="#列表" aria-label="Permalink to &quot;列表&quot;">​</a></h2><h3 id="移除列表指定元素" tabindex="-1">移除列表指定元素 <a class="header-anchor" href="#移除列表指定元素" aria-label="Permalink to &quot;移除列表指定元素&quot;">​</a></h3><p>在 Python 中，可以使用多种方法从列表中删除指定的数据：</p><ol><li><p><strong>使用 <code>remove()</code> 方法</strong>：删除第一个匹配的元素。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_list.remove(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_list)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [1, 3, 4, 2]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>使用 <code>pop()</code> 方法</strong>：根据索引删除元素，并返回该元素。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">removed_item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_list.pop(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_list)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [1, 2, 4]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(removed_item)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>使用 <code>del</code> 语句</strong>：根据索引删除元素。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">del</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_list)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [1, 3, 4]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>使用列表推导式</strong>：删除所有匹配的元素。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_list)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [1, 3, 4]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><p>选择合适的方法取决于你的具体需求。</p><h3 id="以下python代码的输出是什么" tabindex="-1">以下python代码的输出是什么? <a class="header-anchor" href="#以下python代码的输出是什么" aria-label="Permalink to &quot;以下python代码的输出是什么?&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers.append([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>A 4</p><p>B 5</p><p>C 8</p><p>D 12</p><p>E An exception is thrown</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers.append([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>append</code> 方法会将整个列表 <code>[5, 6, 7, 8]</code> 作为一个单独的元素添加到 <code>numbers</code> 列表中。因此，<code>numbers</code> 列表现在包含五个元素：<code>[1, 2, 3, 4, [5, 6, 7, 8]]</code>。</p><p>所以，<code>len(numbers)</code> 的输出是 <code>5</code>。</p><p>而 <code>extend</code> 方法则会将列表中的每个元素逐一添加。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers.extend([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>extend</code> 方法会将 <code>[5, 6, 7, 8]</code> 中的每个元素添加到 <code>numbers</code> 列表中，所以 <code>numbers</code> 变成 <code>[1, 2, 3, 4, 5, 6, 7, 8]</code>。</p><h2 id="闭包的延迟绑定" tabindex="-1">闭包的延迟绑定 <a class="header-anchor" href="#闭包的延迟绑定" aria-label="Permalink to &quot;闭包的延迟绑定&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multipliers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([m(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> multipliers()])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码输出的结果是6， 6， 6， 6。</p><p>你如何修改上面的multipliers的定义产生想要的结果？</p><p>上述问题产生的原因是Python闭包的延迟绑定。这意味着内部函数被调用时，参数的值在闭包内进行查找。因此，当任何由multipliers()返回的函数被调用时，i的值将在附近的范围进行查找。那时，不管返回的函数是否被调用，for循环已经完成，i被赋予了最终的值3。</p><p>下面是解决这一问题的一些方法。一种解决方法就是用Python生成器。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multipliers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x : i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([m(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> multipliers()])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>另外一个解决方案就是创造一个闭包，利用默认函数立即绑定</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multipliers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i: i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([m(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> multipliers()])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="序列" tabindex="-1">序列 <a class="header-anchor" href="#序列" aria-label="Permalink to &quot;序列&quot;">​</a></h2><p>要让一个自定义对象表现得像一个序列（如列表或元组），你需要实现 <code>__len__</code> 和 <code>__getitem__</code> 方法。这两个方法是序列协议的一部分。</p><ul><li><code>__len__(self)</code>：返回序列的长度。</li><li><code>__getitem__(self, index)</code>：返回给定索引的元素，可以是整数索引或切片。</li></ul><p>下面是一个简单的示例：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, data):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __len__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __getitem__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, index):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data[index]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __iter__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 返回一个迭代器对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> iter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">seq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MySequence([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seq))        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seq[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seq[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [2, 3, 4]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>通过实现这两个方法，你可以让自定义对象支持序列操作，比如索引访问、切片和 <code>len()</code> 函数。对对象的迭代需要调用__iter__，如果没有定义该方法，python会调用__getitem__()，让迭代和in运算符可用。</p><h3 id="slots-属性" tabindex="-1">_<em>slots</em>_ 属性 <a class="header-anchor" href="#slots-属性" aria-label="Permalink to &quot;\\__slots__ 属性&quot;">​</a></h3><p>__slots__属性用来限制实例对象的属性，实例对象的实例属性最多只能在__slots__属性值的范围内。</p><p>如果子类没有定义__slots__属性，则不会继承父类的__slots__属性，子类如果不定义自己的 __slots__，将会有 __dict__，从而失去父类的 __slots__ 优势。</p><p>如果子类定义了__slots__属性，则子类对象允许的实例属性包括子类的__slots__加上父类的__slots__。</p><p>在 Python 中，<code>__dict__</code> 是一个字典属性，用于存储对象的可变属性。它是大多数 Python 对象的默认属性，允许动态添加和修改属性。</p><h3 id="dict-属性" tabindex="-1">_<em>dict</em>_ 属性 <a class="header-anchor" href="#dict-属性" aria-label="Permalink to &quot;\\__dict__ 属性&quot;">​</a></h3><ol><li><p><strong>动态属性</strong>：通过 <code>__dict__</code>，可以动态地添加、修改或删除对象的属性。</p></li><li><p><strong>存储属性</strong>：<code>__dict__</code> 中的键是属性名，值是属性的值。</p></li><li><p><strong>可访问性</strong>：可以直接访问和修改对象的属性值。</p></li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyClass(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__dict__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: {&#39;value&#39;: 10}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 动态添加属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.new_attr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__dict__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: {&#39;value&#39;: 10, &#39;new_attr&#39;: 20}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>与 <code>__slots__</code> 的关系</p><ul><li>如果类定义了 <code>__slots__</code>，那么该类的实例将没有 <code>__dict__</code>，这意味着不能动态添加未在 <code>__slots__</code> 中定义的属性。</li><li>使用 <code>__slots__</code> 可以节省内存，因为不再需要为每个实例创建 <code>__dict__</code>。</li></ul><p><code>__dict__</code> 是 Python 提供的灵活机制，使得对象可以动态管理属性，但在需要优化性能和内存时，<code>__slots__</code> 是一个有用的工具。</p><h2 id="切片操作的内存策略" tabindex="-1">切片操作的内存策略 <a class="header-anchor" href="#切片操作的内存策略" aria-label="Permalink to &quot;切片操作的内存策略&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t1[:]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对于元组（<code>tuple</code>），切片操作会返回一个新的元组对象，但由于元组是不可变的，如果切片的范围是整个元组，Python 会优化地返回同一个对象。因此，<code>t1 is t2</code> 的结果是 <code>True</code>。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lis1[:]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lis1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lis2))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对于列表（<code>list</code>），切片操作会创建一个新的列表对象，即使切片的范围是整个列表。因此，<code>id(lis1) == id(lis2)</code> 的结果是 <code>False</code>。</p><p>由数字，字符和下划线组成的短字符串以及[-5,256]内的整数存在内存驻留，将其赋值给多个不同的对象时，内存中只有一个副本，多个对象共享该副本。</p><p>如果对列表进行直接赋值，两个变量将引用同一个列表对象，因此它们的 <code>id</code> 是相同的。例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lis1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lis1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lis2))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在这种情况下，<code>lis1</code> 和 <code>lis2</code> 是同一个对象的两个引用。任何对列表内容的修改通过任意一个引用都会影响到另一个。</p><p>要避免直接赋值导致的引用同一个列表对象，可以使用以下方法创建列表的副本：</p><ol><li><p><strong>使用切片</strong>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lis1[:]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>使用 <code>list()</code> 构造函数</strong>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lis1)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>使用 <code>copy</code> 模块中的 <code>copy()</code> 方法</strong>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy.copy(lis1)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>使用列表推导式</strong>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lis2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lis1]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><p>这些方法都会创建一个新的列表对象，因此修改 <code>lis2</code> 不会影响 <code>lis1</code>。</p><p><strong>切片不会导致越界，但通过下标访问会越界。</strong></p><h2 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Python&#39;s features&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.match(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">(.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">(.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str1, re.M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.I)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str2:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str2.group(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No match found&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>.group(0)输出的是匹配正则表达式整体结果</p><p>.group(1) 列出第一个括号匹配部分，.group(2) 列出第二个括号匹配部分</p><p>re.M：多行匹配，影响 ^ 和 $</p><p>re.I：使匹配对大小写不敏感</p><p>对于你的正则表达式 <code>r&#39;(.*)on(.*?)r.*&#39;</code>，它的含义是：</p><ul><li><code>(.*)</code>：匹配任意字符（除换行符）0次或多次，尽可能多地匹配。</li><li><code>on</code>：匹配字母 &quot;on&quot;。</li><li><code>(.*?)</code>：匹配任意字符（除换行符）0次或多次，尽可能少地匹配。</li><li><code>r</code>：匹配字母 &quot;r&quot;。</li><li><code>.*</code>：匹配任意字符（除换行符）0次或多次，尽可能多地匹配。</li></ul><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>正则表达式是一种强大的文本处理工具，下面是更详细的语法介绍：</p><h4 id="字符匹配" tabindex="-1">字符匹配 <a class="header-anchor" href="#字符匹配" aria-label="Permalink to &quot;字符匹配&quot;">​</a></h4><ul><li><strong>普通字符</strong>：直接匹配字符本身，如 <code>a</code> 匹配字母 &quot;a&quot;。</li><li><strong>特殊字符</strong>：需要转义以匹配本身，如 <code>\\.</code> 匹配点号 &quot;.&quot;</li></ul><h4 id="字符集" tabindex="-1">字符集 <a class="header-anchor" href="#字符集" aria-label="Permalink to &quot;字符集&quot;">​</a></h4><ul><li><strong>简单字符集</strong>：<code>[abc]</code> 匹配 &quot;a&quot;、&quot;b&quot; 或 &quot;c&quot;。</li><li><strong>范围字符集</strong>：<code>[a-z]</code> 匹配从 &quot;a&quot; 到 &quot;z&quot; 的任何小写字母。</li><li><strong>组合字符集</strong>：<code>[a-zA-Z0-9]</code> 匹配任何字母或数字。</li></ul><h4 id="否定字符集" tabindex="-1">否定字符集 <a class="header-anchor" href="#否定字符集" aria-label="Permalink to &quot;否定字符集&quot;">​</a></h4><ul><li><code>[^abc]</code> 匹配除 &quot;a&quot;、&quot;b&quot;、&quot;c&quot; 之外的任何字符。</li></ul><h4 id="预定义字符集" tabindex="-1">预定义字符集 <a class="header-anchor" href="#预定义字符集" aria-label="Permalink to &quot;预定义字符集&quot;">​</a></h4><ul><li><strong><code>\\d</code></strong>：匹配任何数字，等价于 <code>[0-9]</code>。</li><li><strong><code>\\D</code></strong>：匹配任何非数字字符。</li><li><strong><code>\\w</code></strong>：匹配任何字母数字字符（包括下划线），等价于 <code>[a-zA-Z0-9_]</code>。</li><li><strong><code>\\W</code></strong>：匹配任何非字母数字字符。</li><li><strong><code>\\s</code></strong>：匹配任何空白字符（空格、制表符等）。</li><li><strong><code>\\S</code></strong>：匹配任何非空白字符。</li></ul><h4 id="边界匹配" tabindex="-1">边界匹配 <a class="header-anchor" href="#边界匹配" aria-label="Permalink to &quot;边界匹配&quot;">​</a></h4><ul><li><strong><code>^</code></strong>：匹配字符串的开头。</li><li><strong><code>$</code></strong>：匹配字符串的结尾。</li><li><strong><code>\\b</code></strong>：匹配单词边界。</li><li><strong><code>\\B</code></strong>：匹配非单词边界。</li></ul><h4 id="重复限定符" tabindex="-1">重复限定符 <a class="header-anchor" href="#重复限定符" aria-label="Permalink to &quot;重复限定符&quot;">​</a></h4><ul><li><strong><code>*</code></strong>：匹配前一个字符<strong>零次或多次</strong>。</li><li><strong><code>+</code></strong>：匹配前一个字符<strong>一次或多次</strong>。</li><li><strong><code>?</code></strong>：匹配前一个字符零次或一次。</li><li><strong><code>{n}</code></strong>：匹配前一个字符恰好 n 次。</li><li><strong><code>{n,}</code></strong>：匹配前一个字符至少 n 次。</li><li><strong><code>{n,m}</code></strong>：匹配前一个字符至少 n 次，至多 m 次。</li></ul><h4 id="分组和捕获" tabindex="-1">分组和捕获 <a class="header-anchor" href="#分组和捕获" aria-label="Permalink to &quot;分组和捕获&quot;">​</a></h4><ul><li><strong><code>(abc)</code></strong>：捕获组，匹配 &quot;abc&quot; 并捕获。</li><li><strong><code>(?:abc)</code></strong>：非捕获组，匹配 &quot;abc&quot; 但不捕获。</li><li><strong><code>(?P&lt;name&gt;abc)</code></strong>：命名捕获组。</li></ul><h4 id="选择" tabindex="-1">选择 <a class="header-anchor" href="#选择" aria-label="Permalink to &quot;选择&quot;">​</a></h4><ul><li><strong><code>a|b</code></strong>：匹配 &quot;a&quot; 或 &quot;b&quot;。</li></ul><h4 id="零宽断言" tabindex="-1">零宽断言 <a class="header-anchor" href="#零宽断言" aria-label="Permalink to &quot;零宽断言&quot;">​</a></h4><ul><li><strong>正向前瞻</strong>：<code>(?=abc)</code>，匹配 &quot;abc&quot; 前的位置。</li><li><strong>负向前瞻</strong>：<code>(?!abc)</code>，匹配非 &quot;abc&quot; 前的位置。</li><li><strong>正向后顾</strong>：<code>(?&lt;=abc)</code>，匹配 &quot;abc&quot; 后的位置。</li><li><strong>负向后顾</strong>：<code>(?&lt;!abc)</code>，匹配非 &quot;abc&quot; 后的位置。</li></ul><p>这些语法元素可以组合使用，以构建复杂的模式来匹配特定的文本结构。</p><h4 id="特殊转义" tabindex="-1">特殊转义 <a class="header-anchor" href="#特殊转义" aria-label="Permalink to &quot;特殊转义&quot;">​</a></h4><p>使用 <code>]</code>、<code>-</code> 和 <code>^</code> 的方法</p><ol><li><p><strong><code>-</code>（连字符）</strong>：</p><ul><li>如果要匹配连字符，可以将它放在字符集的开头或结尾，或者使用反斜杠转义，如 <code>[-abc]</code> 或 <code>[abc\\-]</code>。</li></ul></li><li><p><strong><code>]</code>（右方括号）</strong>：</p><ul><li>如果要匹配右方括号，可以将它放在字符集的开头，或使用反斜杠转义，如 <code>[]abc]</code> 或 <code>[\\]abc]</code>。</li></ul></li><li><p><strong><code>^</code>（脱字符）</strong>：</p><ul><li>如果要匹配脱字符，需将它放在字符集的非开头位置，或使用反斜杠转义，如 <code>[a^bc]</code> 或 <code>[\\^abc]</code>。</li></ul></li></ol><ul><li>匹配包含 <code>-</code> 的字符：<code>[-a-z]</code> 或 <code>[a-z\\-]</code></li><li>匹配包含 <code>]</code> 的字符：<code>[]a-z]</code> 或 <code>[\\]a-z]</code></li><li>匹配包含 <code>^</code> 的字符：<code>[a^b]</code> 或 <code>[\\^ab]</code></li></ul><h3 id="re-match-和-re-search" tabindex="-1">re.match()和 re.search() <a class="header-anchor" href="#re-match-和-re-search" aria-label="Permalink to &quot;re.match()和 re.search()&quot;">​</a></h3><p><code>re.match()</code></p><ul><li><strong>功能</strong>: 仅在字符串的开头进行匹配。</li><li><strong>用法</strong>: <code>re.match(pattern, string, flags=0)</code></li><li><strong>返回</strong>: 如果匹配成功，返回一个匹配对象；否则返回 <code>None</code>。</li><li><strong>场景</strong>: 当你需要确认字符串是否以特定模式开始时使用。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 尝试匹配开头的 &quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">match </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.match(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, text)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> match:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;re.match found:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, match.group())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Hello</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;re.match found nothing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>re.search()</code></p><ul><li><strong>功能</strong>: 在整个字符串中搜索第一个匹配的子串。</li><li><strong>用法</strong>: <code>re.search(pattern, string, flags=0)</code></li><li><strong>返回</strong>: 如果找到匹配项，返回一个匹配对象；否则返回 <code>None</code>。</li><li><strong>场景</strong>: 当你需要在字符串的任意位置查找模式时使用。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Say hello to the world!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在整个字符串中搜索 &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">search </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.search(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, text)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> search:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;re.search found:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, search.group())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: hello</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;re.search found nothing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><p><strong>匹配位置</strong>:</p><ul><li><code>re.match()</code> 只匹配字符串的开头。</li><li><code>re.search()</code> 在整个字符串中查找第一个匹配项。</li></ul></li><li><p><strong>使用场景</strong>:</p><ul><li>使用 <code>re.match()</code> 当你只关心字符串是否以特定模式开始。</li><li>使用 <code>re.search()</code> 当你需要查找字符串中是否存在某个模式。</li></ul></li></ul><h2 id="find-函数" tabindex="-1">Find 函数 <a class="header-anchor" href="#find-函数" aria-label="Permalink to &quot;Find 函数&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.find(sub[, start[, end]])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数</p><ul><li><strong><code>sub</code></strong>: 要查找的子字符串。</li><li><strong><code>start</code></strong>: 可选参数，指定开始查找的位置。</li><li><strong><code>end</code></strong>: 可选参数，指定结束查找的位置。</li></ul><p>返回值</p><ul><li>返回子字符串最后一次出现的最左侧索引。</li><li>如果未找到子字符串，则返回 <code>-1</code>。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world! Hello, Python!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查找 &quot;Hello&quot; 最后一次出现的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text.rfind(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 14</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定查找范围</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index_with_range </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text.rfind(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index_with_range)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查找不存在的子字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">not_found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text.rfind(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(not_found)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: -1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li><code>rfind()</code> 和 <code>find()</code> 的区别在于：<code>rfind()</code> 从右向左查找，<strong>但返回的仍是从左向右的索引位置</strong>。</li><li>如果只需要知道子字符串是否存在，可以使用 <code>in</code> 操作符。</li></ul><h3 id="查找字符串" tabindex="-1">查找字符串 <a class="header-anchor" href="#查找字符串" aria-label="Permalink to &quot;查找字符串&quot;">​</a></h3><ol><li><p><strong><code>str.find()</code></strong></p><ul><li>用于查找子字符串在字符串中的最低索引。如果未找到，则返回 <code>-1</code>。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text.find(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong><code>str.index()</code></strong></p><ul><li>类似于 <code>find()</code>，但如果未找到子字符串，则会抛出 <code>ValueError</code>。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text.index(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong><code>str.rfind()</code> 和 <code>str.rindex()</code></strong></p><ul><li>分别用于从右侧开始查找子字符串。</li></ul></li><li><p><code>re.findall()</code></p><p>用于查找字符串中所有与正则表达式匹配的非重叠部分。它返回一个列表，包含所有匹配的子字符串。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pattern </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 匹配一个或多个数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;There are 3 cats, 4 dogs, and 5 birds.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">matches </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(pattern, text)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(matches)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：[&#39;3&#39;, &#39;4&#39;, &#39;5&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><strong>正则表达式模式</strong>：定义要匹配的模式。在上面的例子中，<code>\\d+</code> 匹配一个或多个数字。</li><li><strong>返回值</strong>：一个列表，包含所有匹配的字符串。如果没有匹配项，则返回空列表。</li></ul><ol><li><p><strong>查找所有单词</strong></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Find all words in this sentence.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">words </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b\\w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, text)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(words)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：[&#39;Find&#39;, &#39;all&#39;, &#39;words&#39;, &#39;in&#39;, &#39;this&#39;, &#39;sentence&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>提取邮箱地址</strong></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Contact us at info@example.com or support@example.org.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emails </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b[A-Za-z0-9._%+-]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Za-z0-9.-]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Z|a-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2,}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, text)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(emails)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：[&#39;info@example.com&#39;, &#39;support@example.org&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol></li></ol><h3 id="替换字符串" tabindex="-1">替换字符串 <a class="header-anchor" href="#替换字符串" aria-label="Permalink to &quot;替换字符串&quot;">​</a></h3><ol><li><p><strong><code>str.replace()</code></strong></p><ul><li>返回一个新的字符串，其中所有匹配的子字符串都被替换。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text.replace(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(new_text)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：Hello, Python!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>使用正则表达式进行替换</strong></p><ul><li>使用 <code>re</code> 模块，可以进行更复杂的模式替换。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.sub(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, text)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(new_text)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：Hello, Python!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><h2 id="列表和引用机制" tabindex="-1">列表和引用机制 <a class="header-anchor" href="#列表和引用机制" aria-label="Permalink to &quot;列表和引用机制&quot;">​</a></h2><ol><li><p><strong>列表创建：</strong></p><ul><li>使用列表推导式创建的子列表是独立的，互不影响。</li><li>使用乘法运算符 <code>*</code> 创建的列表是对同一对象的多个引用。</li></ul></li><li><p><strong>引用和对象：</strong></p><ul><li>在 Python 中，变量存储的是对象的引用，而不是对象本身。</li><li>对于可变对象（如列表），多个引用可以指向同一个对象。</li></ul></li><li><p><strong>共享引用的影响：</strong></p><ul><li>如果多个变量引用同一个可变对象，修改该对象会影响所有引用。</li><li>这在使用 <code>*</code> 运算符扩展列表时尤为重要，因为它复制的是引用。</li></ul></li><li><p><strong>避免意外修改：</strong></p><ul><li>可以使用列表推导式或 <code>copy</code> 模块的 <code>deepcopy</code> 方法来创建独立的副本，避免共享引用的问题。</li></ul></li><li><p><strong>示例：</strong></p><ul><li>独立创建：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li>共享引用创建：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ol><p>理解这些概念有助于避免在处理列表和其他可变对象时出现意外行为。</p><h2 id="枚举类型" tabindex="-1">枚举类型 <a class="header-anchor" href="#枚举类型" aria-label="Permalink to &quot;枚举类型&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lists </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tmp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i,j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lists):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tmp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tmp)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>enumerate(lists) 会生成一个包含索引和值的元组序列：<code>(0, 1)</code>, <code>(1, 2)</code>, <code>(2, 3)</code>, <code>(3, 4)</code></p><h2 id="装饰器" tabindex="-1">装饰器 <a class="header-anchor" href="#装饰器" aria-label="Permalink to &quot;装饰器&quot;">​</a></h2><p>装饰器是 Python 中的一种高级功能，允许你在不修改函数代码的情况下，增强或改变函数的行为。装饰器本质上是一个函数，它接收一个函数作为输入，并返回一个新的函数。</p><p>以下是一个计时器装饰器的示例，用于记录一个函数的执行时间：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wraps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timing_decorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func):</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @wraps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        start_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> func(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        end_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Function &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">func.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__name__}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; executed in </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start_time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:.4f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wrapper</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用装饰器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@timing_decorator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    time.sleep(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 模拟一个耗时操作</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example_function()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li><strong><code>timing_decorator</code></strong>: 这是一个装饰器函数，接收一个函数 <code>func</code> 作为参数。</li><li><strong><code>wrapper</code></strong>: 内部函数，负责计算执行时间并调用原始函数。</li><li><strong><code>@wraps(func)</code></strong>: 这个装饰器来自 <code>functools</code> 模块，用于保留被装饰函数的元数据（如函数名和文档字符串）。</li><li><strong><code>start_time</code> 和 <code>end_time</code></strong>: 用于记录函数执行前后的时间。</li><li><strong><code>example_function</code></strong>: 被装饰的函数，模拟一个耗时操作。</li></ul><p>使用这个装饰器，可以轻松测量任何函数的执行时间。</p><p>装饰器本质上就是一个函数，它接受另一个函数作为参数，并返回一个新的函数或可调用对象。装饰器允许你在不改变原始函数代码的情况下，扩展或修改其行为。</p><h2 id="生成器" tabindex="-1">生成器 <a class="header-anchor" href="#生成器" aria-label="Permalink to &quot;生成器&quot;">​</a></h2><p>生成器（Generator）是创建迭代器的简单而强大的工具。它们写起来就像是正规的函数，只是在需要返回数据的时候使用 yield 语句。每次 next()被调用时，生成器会返回它脱离的位置（它记忆语句最后一次执行的位置和所有的数据值）</p><p>在 Python 中，<code>yield</code> 用于定义生成器函数，而生成器表达式是一种简化的语法，不需要显式使用 <code>yield</code>。生成器表达式直接返回一个生成器对象。</p><p>例如，使用生成器函数，你会这样写：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_generator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用生成器表达式时：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> X:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>两者都实现了延迟计算，按需生成值，但生成器表达式更简洁，适合简单的生成器逻辑。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在这个例子中，<code>X</code> 是一个列表，而不是生成器。列表推导式 <code>[i for i in range(10)]</code> 会立即计算并存储所有元素在内存中。</p><p>**当生成器被迭代完后，它就不能再返回任何值。**如果你尝试继续迭代或调用 <code>next()</code>，会触发 <code>StopIteration</code> 异常。这是生成器的正常行为。</p><p>如果你需要重新迭代生成器，你必须重新创建它。例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建生成器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 第一次迭代</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gen:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 0, 1, 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 尝试再次迭代（不会输出任何内容）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gen:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重新创建生成器以再次迭代</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gen:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 0, 1, 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="生成器表达式" tabindex="-1">生成器表达式 <a class="header-anchor" href="#生成器表达式" aria-label="Permalink to &quot;生成器表达式&quot;">​</a></h3><p>用于创建生成器对象。它类似于列表推导式，但生成器表达式不会立即计算和存储所有元素，而是按需生成元素。这在处理大量数据时非常有用，因为它节省内存。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (expression </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建一个生成器表达式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用生成器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gen:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>要通过 <code>for</code> 循环生成一个元组，可以使用元组推导式（类似列表推导式，但直接用 <code>tuple()</code> 转换）。不过，<strong>元组推导式并不存在</strong>，但你可以通过生成器表达式结合 <code>tuple()</code> 来实现。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用生成器表达式和 tuple() 生成元组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: (0, 1, 4, 9, 16)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里，生成器表达式 <code>(i * i for i in range(5))</code> 会生成平方数序列，然后 <code>tuple()</code> 将其转换为元组。</p><h2 id="可变和不可变对象" tabindex="-1">可变和不可变对象 <a class="header-anchor" href="#可变和不可变对象" aria-label="Permalink to &quot;可变和不可变对象&quot;">​</a></h2><h3 id="传递可变对象列表" tabindex="-1">传递可变对象列表 <a class="header-anchor" href="#传递可变对象列表" aria-label="Permalink to &quot;传递可变对象列表&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a(c)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>解释</strong>：</p><ul><li>当 <code>a(c)</code> 被调用时，<code>b</code> 是一个指向 <code>c</code> 的局部变量。</li><li>语句 <code>b = [1, 2, 3]</code> 创建了一个新的列表 <code>[1, 2, 3]</code>，并让 <code>b</code> 指向这个新列表。</li><li>这并没有改变 <code>c</code>，因为 <code>b</code> 的重新赋值仅在函数内部生效。</li><li>因此，<code>print(c)</code> 输出 <code>[4, 5, 6]</code>，原列表 <code>c</code> 保持不变。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a(c)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>解释</strong>：</p><ul><li><p>当 <code>a(c)</code> 被调用时，<code>b</code> 指向与 <code>c</code> 相同的列表对象。</p></li><li><p>语句 <code>b[0] = 5</code> 直接修改了列表的第一个元素。</p></li><li><p>因为列表是可变对象，这种修改影响到了原列表 <code>c</code>。</p></li><li><p>因此，<code>print(c)</code> 输出 <code>[5, 5, 6]</code>，反映了对列表内容的修改。</p></li><li><p><strong>重新赋值</strong>：在函数中使用 <code>b = [1, 2, 3]</code> 这种形式只是改变了局部变量 <code>b</code> 的指向，不会影响到传入的列表 <code>c</code>。</p></li><li><p><strong>直接修改内容</strong>：使用 <code>b[0] = 5</code> 或 <code>b[:] = [1, 2, 3]</code> 这样的操作修改了列表的实际内容，因此会影响到传入的列表 <code>c</code>。</p></li></ul><p>这体现了Python中可变对象（如列表）的特性：可以直接修改其内容，而不改变其引用。</p><h3 id="传递不可变对象列表" tabindex="-1">传递不可变对象列表 <a class="header-anchor" href="#传递不可变对象列表" aria-label="Permalink to &quot;传递不可变对象列表&quot;">​</a></h3><p>这两个代码示例展示了Python中变量的引用和标识符（ID）的使用：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a(c)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>解释</strong>：</p><ul><li><code>c</code> 被赋值为 <code>5</code>，并传递给函数 <code>a</code>。</li><li>在函数 <code>a</code> 中，<code>b</code> 最初指向与 <code>c</code> 相同的整数对象 <code>5</code>。</li><li>语句 <code>b = 4</code> 将 <code>b</code> 重新指向一个新的整数对象 <code>4</code>。此时，<code>b</code> 的 ID 发生了变化。</li><li><code>print(id(b))</code> 输出的是整数 <code>4</code> 的 ID。</li><li><code>print(id(c))</code> 输出的是整数 <code>5</code> 的 ID。<code>c</code> 的 ID 没有改变，因为 <code>b</code> 的重新赋值不影响 <code>c</code>。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a(c)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>解释</strong>：</p><ul><li><code>c</code> 被赋值为 <code>5</code>，并传递给函数 <code>a</code>。</li><li>在函数 <code>a</code> 中，<code>b</code> 指向与 <code>c</code> 相同的整数对象 <code>5</code>。</li><li><code>print(id(b))</code> 输出的是整数 <code>5</code> 的 ID。</li><li><code>print(id(c))</code> 也输出整数 <code>5</code> 的 ID，因为 <code>b</code> 和 <code>c</code> 指向同一个对象。</li></ul><p><strong>整数对象的不可变性</strong>：整数是不可变对象。即使在函数内部重新赋值，外部变量的引用不会受到影响。<strong>并且只有修改时才会重新复制一份，导致id不同。</strong></p><p><strong>ID的输出</strong>：<code>id()</code> 函数返回对象的唯一标识符。对于相同的不可变对象（如整数），ID 是相同的。重新赋值会改变局部变量的 ID，但不会影响外部变量。</p><h2 id="is-和-的区别" tabindex="-1">is 和==的区别 <a class="header-anchor" href="#is-和-的区别" aria-label="Permalink to &quot;is 和==的区别&quot;">​</a></h2><p>is 判断的是a对象是否就是b对象，是通过id来判断的。</p><p>==判断的是a对象的值是否和b对象的值相等，是通过value来判断的。</p><h2 id="系统编程" tabindex="-1">系统编程 <a class="header-anchor" href="#系统编程" aria-label="Permalink to &quot;系统编程&quot;">​</a></h2><h3 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> multiprocessing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Process, Queue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(queue, data):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    queue.put(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Processed </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Queue()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    processes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Process(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(q, i)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processes:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        p.start()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processes:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        p.join()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.empty():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(q.get())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="进程池" tabindex="-1">进程池 <a class="header-anchor" href="#进程池" aria-label="Permalink to &quot;进程池&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> multiprocessing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pool</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t_start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 开始执行, 进程号为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (msg, os.getpid()))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # random.random() 随机生成 0~1 之间的浮点数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    time.sleep(random.random() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t_stop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 执行完毕，耗时 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%0.2f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 秒&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (msg, t_stop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_start))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    po </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pool(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义一个进程池，最大进程数 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Pool().apply_async(要调用的目标, (传递给目标的参数元组,))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 每次循环将会用空闲出来的子进程去调用目标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        po.apply_async(worker, (i,))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;----start----&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    po.close()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 关闭进程池，关闭后 po 不再接收新的请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    po.join()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待 po 中所有子进程执行完成，必须放在 close 语句之后</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-----end-----&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><code>multiprocessing.Pool</code> 提供了一些常用的方法来管理和使用进程池。以下是这些方法的解析：</p><ol><li><p><strong><code>apply(func, args=(), kwds={})</code></strong>:</p><ul><li>同步执行函数 <code>func</code>，并传递参数 <code>args</code> 和 <code>kwds</code>。</li><li>阻塞调用，直到结果返回。</li></ul></li><li><p><strong><code>apply_async(func, args=(), kwds={}, callback=None, error_callback=None)</code></strong>:</p><ul><li>异步执行函数 <code>func</code>。</li><li><code>callback</code> 是可选的，执行成功后调用。</li><li><code>error_callback</code> 是可选的，发生错误时调用。</li></ul></li><li><p><strong><code>map(func, iterable, chunksize=None)</code></strong>:</p><ul><li>类似于内置的 <code>map</code> 函数，但并行执行。</li><li>同步阻塞，直到所有结果返回。</li></ul></li><li><p><strong><code>map_async(func, iterable, chunksize=None, callback=None, error_callback=None)</code></strong>:</p><ul><li>异步版本的 <code>map</code>。</li><li><code>callback</code> 和 <code>error_callback</code> 用于处理结果或错误。</li></ul></li><li><p><strong><code>imap(func, iterable, chunksize=1)</code></strong>:</p><ul><li>类似于 <code>map</code>，但返回迭代器，结果按顺序返回。</li><li>可以在结果生成时逐步处理。</li></ul></li><li><p><strong><code>imap_unordered(func, iterable, chunksize=1)</code></strong>:</p><ul><li>类似于 <code>imap</code>，但结果顺序不确定。</li><li>更快，因为不需要等待按顺序返回。</li></ul></li><li><p><strong><code>starmap(func, iterable, chunksize=None)</code></strong>:</p><ul><li>类似于 <code>map</code>，但用于解包参数。</li><li>每个元素应该是一个元组，解包后传给 <code>func</code>。</li></ul></li><li><p><strong><code>starmap_async(func, iterable, chunksize=None, callback=None, error_callback=None)</code></strong>:</p><ul><li>异步版本的 <code>starmap</code>。</li></ul></li><li><p><strong><code>close()</code></strong>:</p><ul><li>关闭进程池，防止更多任务提交。</li><li>必须在 <code>join()</code> 之前调用。</li></ul></li><li><p><strong><code>terminate()</code></strong>:</p><ul><li>立即停止所有工作进程，不处理未完成任务。</li></ul></li><li><p><strong><code>join()</code></strong>:</p><ul><li>等待所有工作进程退出。</li><li>必须在 <code>close()</code> 或 <code>terminate()</code> 之后调用。</li></ul></li></ol><p>这些方法提供了多种并行执行任务的方式，适合不同的应用场景。</p><h4 id="apply-和-apply-async-区别" tabindex="-1">apply 和 apply_async 区别 <a class="header-anchor" href="#apply-和-apply-async-区别" aria-label="Permalink to &quot;apply 和 apply_async 区别&quot;">​</a></h4><p>下面是一个使用 <code>apply</code> 和 <code>apply_async</code> 的示例代码，以及它们的对比和解释。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> multiprocessing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pool</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    time.sleep(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 模拟耗时操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 apply</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use_apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pool(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pool:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pool.apply(square, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i,))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            results.append(result)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Results with apply:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, results)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 apply_async</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use_apply_async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pool(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pool:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        async_results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            async_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pool.apply_async(square, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i,))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            async_results.append(async_result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 获取结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [async_result.get() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> async_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> async_results]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Results with apply_async:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, results)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    start_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    use_apply()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Time with apply:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, time.time() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start_time)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    start_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    use_apply_async()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Time with apply_async:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, time.time() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start_time)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p><code>apply</code></p><ul><li><strong>行为</strong>：每次调用 <code>apply</code> 时，主进程会等待任务完成，然后继续下一个任务。</li><li><strong>结果</strong>：由于是阻塞的，即使有多个进程可用，任务也是一个接一个地执行。</li><li><strong>时间</strong>：总时间约为任务数乘以每个任务的执行时间。</li></ul><p><code>apply_async</code></p><ul><li><p><strong>行为</strong>：每次调用 <code>apply_async</code> 时，任务会被异步提交，主进程不等待任务完成，可以立即提交下一个任务。</p></li><li><p><strong>结果</strong>：多个任务可以并行执行，充分利用可用的进程。</p></li><li><p><strong>时间</strong>：总时间约为任务执行时间和进程池大小的比值。</p></li><li><p><strong><code>apply</code></strong> 适合需要顺序执行并立即获取结果的场景。</p></li><li><p><strong><code>apply_async</code></strong> 适合需要并行处理多个任务而不必立即获取结果的场景。</p></li></ul><p>如果使用 <code>Pool(3)</code>，即使设置了三个进程，使用 <code>apply</code> 仍然会导致每次只执行一个任务。原因是 <code>apply</code> 是同步阻塞的，主进程会等待每个任务完成后再提交下一个任务。因此，多个进程的优势无法体现。</p><p><strong><code>with</code> 语句: 确保在块结束时自动调用 <code>pool.close()</code> 和 <code>pool.join()</code>，无需手动关闭。</strong></p><h4 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h4><p>如果要使用Pool创建进程，就需要使用 multiprocessing.Manager() 中的 Queue()，而不是 multiprocessing.Queue()，否则会得到一条如下的错误信息：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RuntimeError:Queue objects should only be shared between processes through inheritance.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这是因为 <code>multiprocessing.Pool</code> 中的进程不能直接继承父进程的内存空间。</p><ol><li><p><strong>进程启动方式</strong>:</p><ul><li><code>Pool</code> 使用的进程启动方式（<code>fork</code> 或 <code>spawn</code>）会导致子进程无法直接继承父进程中的对象。</li><li><code>multiprocessing.Queue()</code> 依赖于父进程的内存空间来管理进程间通信。</li></ul></li><li><p><strong>对象共享限制</strong>:</p><ul><li><code>multiprocessing.Queue()</code> 使用管道和锁，这些不能在 <code>Pool</code> 的子进程中直接共享。</li></ul></li><li><p><strong>Manager 的作用</strong>:</p><ul><li><code>multiprocessing.Manager()</code> 创建的 <code>Queue</code> 是通过一个独立的服务器进程管理的，能够在不同的进程间安全地共享。</li><li>这种方式不依赖于进程的继承关系，因此适合 <code>Pool</code>。</li></ul></li></ol><p>使用 <code>Manager().Queue()</code> 可以确保在 <code>Pool</code> 中的所有进程都能安全地访问和操作队列。</p><h2 id="python-全局解释器锁-gil" tabindex="-1">Python 全局解释器锁 GIL <a class="header-anchor" href="#python-全局解释器锁-gil" aria-label="Permalink to &quot;Python 全局解释器锁 GIL&quot;">​</a></h2><p>简单来说，Python 全局解释器锁(Global Interpreter Lock) 是一个互斥锁（或锁），只允许一个线程保持 Python 解释器的控制权。注意，锁的是解释器。</p><h3 id="为-python-解决了什么问题" tabindex="-1">为 python 解决了什么问题 <a class="header-anchor" href="#为-python-解决了什么问题" aria-label="Permalink to &quot;为 python 解决了什么问题&quot;">​</a></h3><p>引用计数是一种垃圾回收机制，用于记录Python对象被引用的次数。当一个对象的引用计数为0时，表示没有任何引用指向该对象，因此它会被垃圾回收机制自动释放。</p><p>在多线程环境中，如果没有GIL锁的保护，多个线程可能会同时对同一个Python对象进行操作，这可能会导致引用计数混乱，从而导致内存泄漏或误删。而GIL锁的存在可以保证在任何时刻只有一个线程在执行，这使得引用计数能够正确地记录每个对象的引用次数。</p><p>综上所述，GIL锁和引用计数是相互关联的，它们共同保证了Python多线程的安全性和内存管理的正确性。</p><h3 id="那么多线程安全如何解决呢" tabindex="-1">那么多线程安全如何解决呢？ <a class="header-anchor" href="#那么多线程安全如何解决呢" aria-label="Permalink to &quot;那么多线程安全如何解决呢？&quot;">​</a></h3><ol><li>使用线程安全的对象和数据结构：Python中提供了一些线程安全的对象和数据结构，如Queue、Lock、Semaphore等。这些对象可以用于实现线程之间的通信和同步，确保多线程安全。</li><li>避免共享数据：尽可能减少多个线程同时访问共享数据的需要，可以将共享数据封装在对象中，并使用锁或其他同步机制来保护数据的访问。</li><li>使用锁机制：锁是一种同步机制，可以用于防止多个线程同时访问共享资源。Python中提供了Lock对象来实现锁的功能，确保同一时间只有一个线程可以执行特定的操作。</li><li>使用线程安全的设计模式：在设计程序时，可以采用一些线程安全的设计模式，如临界区、信号量、条件变量等，以确保多线程安全执行。</li><li>使用线程池：线程池可以预先创建一定数量的线程，并将任务分配给这些线程执行，这样可以避免多个线程同时创建和销毁的问题，提高程序的效率和稳定性。</li></ol><h3 id="那么在python里面-如何才能实现真正的并发" tabindex="-1">那么在python里面，如何才能实现真正的并发 <a class="header-anchor" href="#那么在python里面-如何才能实现真正的并发" aria-label="Permalink to &quot;那么在python里面，如何才能实现真正的并发&quot;">​</a></h3><p>一种方法是使用多进程。Python的<code>multiprocessing</code>模块提供了创建和管理进程的功能，可以创建多个进程并在进程之间进行通信和同步。由于每个进程有自己的解释器和内存空间，因此它们可以真正地并发执行。</p><p>另一种方法是使用异步编程模型。Python的<code>asyncio</code>模块提供了异步I/O和协程的功能，可以编写基于事件循环的异步代码，实现真正的并发执行。异步编程模型可以与多线程和多进程结合使用，以充分利用多核CPU和并行执行任务。</p><h3 id="threading" tabindex="-1">threading <a class="header-anchor" href="#threading" aria-label="Permalink to &quot;threading&quot;">​</a></h3><p>在 Python 中，<code>threading</code> 模块可以实现多线程编程，但由于全局解释器锁（GIL）的存在，线程并不能真正并行地执行 Python 字节码。</p><ul><li><strong>线程创建</strong>:</li></ul><ol><li><ul><li>使用 <code>threading.Thread</code> 类创建线程，每个线程可以独立运行一个函数。</li></ul></li><li><p><strong>线程调度</strong>:</p><ul><li>Python 解释器会在 I/O 操作或某些特定的字节码执行后释放 GIL，使其他线程有机会获得执行权。</li><li>操作系统也会调度线程，可能在不同的时间片切换执行。</li></ul></li><li><p><strong>线程同步</strong>:</p><ul><li>提供了锁、条件变量、事件、信号量等同步原语，帮助开发者在多线程环境中安全地访问共享数据。</li></ul></li><li><p><strong>适用场景</strong>:</p><ul><li><code>threading</code> 适合 I/O 密集型任务，因为这些任务在等待 I/O 操作时会释放 GIL，让其他线程有机会执行。</li></ul></li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threading</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread is running&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">threads </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    thread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threading.Thread(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    threads.append(thread)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    thread.start()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threads:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    thread.join()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li><strong>CPU 密集型任务</strong>: 由于 GIL 的存在，多线程对 CPU 密集型任务的性能提升有限。</li><li><strong>解决方案</strong>: <ul><li>使用 <code>multiprocessing</code> 模块来创建多个进程，每个进程有独立的 Python 解释器和 GIL。</li><li>使用 C 扩展模块或其他语言实现性能关键部分。</li></ul></li></ul><p>尽管 GIL 限制了多线程的并行能力，但对于 I/O 密集型任务，<code>threading</code> 仍然是一个有效的工具。</p><h2 id="socket" tabindex="-1">socket <a class="header-anchor" href="#socket" aria-label="Permalink to &quot;socket&quot;">​</a></h2><h3 id="tcp-通信" tabindex="-1">TCP 通信 <a class="header-anchor" href="#tcp-通信" aria-label="Permalink to &quot;TCP 通信&quot;">​</a></h3><h4 id="服务端-server" tabindex="-1">服务端 (Server) <a class="header-anchor" href="#服务端-server" aria-label="Permalink to &quot;服务端 (Server)&quot;">​</a></h4><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建 TCP/IP 套接字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_socket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket.socket(socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AF_INET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SOCK_STREAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 绑定套接字到地址和端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">65432</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_socket.bind(server_address)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 监听传入连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_socket.listen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;等待连接...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">connection, client_address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server_socket.accept()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;连接来自&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, client_address)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connection.recv(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;收到:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data.decode())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connection.sendall(data)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    connection.close()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="客户端-client" tabindex="-1">客户端 (Client) <a class="header-anchor" href="#客户端-client" aria-label="Permalink to &quot;客户端 (Client)&quot;">​</a></h4><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建 TCP/IP 套接字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client_socket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket.socket(socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AF_INET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SOCK_STREAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 连接到服务器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">65432</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client_socket.connect(server_address)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;这是一个测试消息&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    client_socket.sendall(message.encode())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 接收响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client_socket.recv(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;收到:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data.decode())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    client_socket.close()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="udp-通信" tabindex="-1">UDP 通信 <a class="header-anchor" href="#udp-通信" aria-label="Permalink to &quot;UDP 通信&quot;">​</a></h3><h4 id="服务端-server-1" tabindex="-1">服务端 (Server) <a class="header-anchor" href="#服务端-server-1" aria-label="Permalink to &quot;服务端 (Server)&quot;">​</a></h4><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建 UDP/IP 套接字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_socket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket.socket(socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AF_INET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SOCK_DGRAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 绑定套接字到地址和端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">65432</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_socket.bind(server_address)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;等待接收消息...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data, address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server_socket.recvfrom(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;收到来自 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的消息: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(address, data.decode()))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server_socket.sendto(data, address)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="客户端-client-1" tabindex="-1">客户端 (Client) <a class="header-anchor" href="#客户端-client-1" aria-label="Permalink to &quot;客户端 (Client)&quot;">​</a></h4><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建 UDP/IP 套接字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client_socket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket.socket(socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AF_INET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SOCK_DGRAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">65432</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;这是一个测试消息&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 发送消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client_socket.sendto(message.encode(), server_address)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 接收响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data, server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client_socket.recvfrom(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;收到:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data.decode())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    client_socket.close()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>这些示例展示了如何使用 Python 的 <code>socket</code> 模块来进行基本的 TCP 和 UDP 通信。</p><h2 id="wsgi" tabindex="-1">WSGI <a class="header-anchor" href="#wsgi" aria-label="Permalink to &quot;WSGI&quot;">​</a></h2><h3 id="过程" tabindex="-1">过程 <a class="header-anchor" href="#过程" aria-label="Permalink to &quot;过程&quot;">​</a></h3><ol><li><p><strong>发送 HTTP 请求</strong>：浏览器发送 HTTP 请求到 Web 服务器，请求动态资源。</p></li><li><p><strong>Web 服务器调用 WSGI</strong>：Web 服务器接收到请求后，通过 WSGI 调用应用程序框架，传递请求环境（environ）和一个回调函数（start_response）。</p></li><li><p><strong>框架调用 start_response</strong>：应用程序框架调用 <code>start_response</code> 方法，设置返回的状态码和头信息。</p></li><li><p><strong>保存状态和头信息</strong>：调用 <code>start_response</code> 后，Web 服务器保存应用程序设置的状态和头信息。</p></li><li><p><strong>生成动态内容</strong>：应用程序框架查询数据库或执行其他逻辑，生成动态页面的主体内容（body）。</p></li><li><p><strong>返回响应体</strong>：应用程序框架将生成的响应体返回给 Web 服务器。</p></li><li><p><strong>发送响应给浏览器</strong>：Web 服务器将完整的 HTTP 响应（包括状态、头信息和响应体）发送回浏览器，浏览器接收并呈现内容。</p></li></ol><p>请求环境（<code>environ</code>）是一个包含请求信息的字典，传递给 WSGI 应用程序。它包含了许多关于请求和服务器的信息。以下是一些常见的键：</p><ol><li><strong><code>REQUEST_METHOD</code></strong>：HTTP 方法（如 GET、POST）。</li><li><strong><code>PATH_INFO</code></strong>：请求的路径部分。</li><li><strong><code>QUERY_STRING</code></strong>：URL 中的查询字符串。</li><li><strong><code>SERVER_NAME</code></strong> 和 <strong><code>SERVER_PORT</code></strong>：服务器的主机名和端口。</li><li><strong><code>HTTP_</code> 前缀的键</strong>：所有 HTTP 请求头信息。</li><li><strong><code>wsgi.input</code></strong>：一个文件对象，包含请求体（如 POST 数据）。</li><li><strong><code>wsgi.url_scheme</code></strong>：请求的协议（http 或 https）。</li></ol><p>这些信息帮助应用程序理解请求的上下文，从而生成适当的响应。</p><h2 id="flask" tabindex="-1">Flask <a class="header-anchor" href="#flask" aria-label="Permalink to &quot;Flask&quot;">​</a></h2><h3 id="flask-使用正则表达式来定义-url-路由" tabindex="-1">Flask 使用正则表达式来定义 URL 路由 <a class="header-anchor" href="#flask-使用正则表达式来定义-url-路由" aria-label="Permalink to &quot;Flask 使用正则表达式来定义 URL 路由&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flask</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> werkzeug.routing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseConverter</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flask(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__name__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegexConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, map, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RegexConverter, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.url_map.converters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;regex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RegexConverter</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/user/&lt;regex(&quot;[a-zA-Z0-9_]+&quot;):username&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> user_profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app.run()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在 Flask 中，自定义 URL 转换器通过设置 <code>self.regex</code> 来定义匹配 URL 部分的正则表达式。</p><p><code>self.regex</code> 是一个字符串，表示正则表达式，用于匹配 URL 中特定部分的格式。这个正则表达式决定了 Flask 的路由系统如何解析和验证该部分的 URL。</p><p>例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegexConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, map, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中，<code>self.regex = args[0]</code> 将传入的正则表达式字符串赋值给 <code>self.regex</code>。这意味着当路由使用这个转换器时，它会根据 <code>self.regex</code> 来匹配 URL 的相应部分。</p><h3 id="baseconverter" tabindex="-1">BaseConverter <a class="header-anchor" href="#baseconverter" aria-label="Permalink to &quot;BaseConverter&quot;">​</a></h3><p><code>BaseConverter</code> 是 Flask 中用于创建自定义 URL 转换器的基类。它允许你定义自己的规则来解析和验证 URL 的特定部分。</p><ul><li><strong>初始化</strong>: <code>BaseConverter</code> 接受一个 <code>map</code> 参数，表示 URL 映射。</li><li><strong>regex 属性</strong>: 你可以通过设置 <code>self.regex</code> 来定义匹配规则。</li><li><strong>to_python</strong>: 可以重写此方法，将 URL 部分转换为 Python 对象。</li><li><strong>to_url</strong>: 可以重写此方法，将 Python 对象转换为 URL 格式。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> werkzeug.routing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseConverter</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegexConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, map, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.url_map.converters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;regex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RegexConverter</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/user/&lt;regex(&quot;[a-zA-Z0-9_]+&quot;):username&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> user_profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在这个例子中，<code>RegexConverter</code> 继承自 <code>BaseConverter</code>，并通过 <code>self.regex</code> 设置了一个自定义的正则表达式来匹配 URL 部分。</p><h2 id="布尔值" tabindex="-1">布尔值 <a class="header-anchor" href="#布尔值" aria-label="Permalink to &quot;布尔值&quot;">​</a></h2><p>下列表达式的值为True的是（ ）</p><p>A. (5+4j &gt; 2-3j)</p><p>复数不能直接比较大小，因此这个表达式无效。</p><p>B. (3 &gt; 2 &gt; 2)</p><p>这个表达式是 False，因为虽然 (3 &gt; 2) 为 True，但 (2 &gt; 2) 为 False。</p><p>C. ((3,2) &lt; (&#39;a&#39;,&#39;b&#39;))</p><p>元组之间的比较是基于字典序的。数字和字符串不能直接比较，因此这个表达式会引发错误。 Python2能直接比较数字和字符串，而Python3不行。</p><p>D. &#39;abc&#39; &gt; &#39;xyz&#39;</p><p>字符串比较是基于字典序的。在字典序中，&#39;abc&#39; 小于 &#39;xyz&#39;，因此这个表达式是 False。</p><p>下列哪种说法是错误的（A ）</p><p>A 除字典类型外，所有标准对象均可以用于布尔测试</p><p>B 空字符串的布尔值是False</p><p>C 空列表对象的布尔值是False</p><p>D 值为0的任何数字对象的布尔值是False</p><p>字典类型也可以用于布尔测试。实际上，所有标准对象都可以进行布尔测试，<strong>空的容器类型</strong>（如列表、字典、集合）和数值0的布尔值都是 <code>False</code>。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NONE; </span></span>
<span class="line"><span>False(布尔类型) </span></span>
<span class="line"><span>所有的值为零的数 </span></span>
<span class="line"><span>0（整型） </span></span>
<span class="line"><span>0.0（浮点型） </span></span>
<span class="line"><span>0L(长整型) </span></span>
<span class="line"><span>0.0+0.0j(复数) </span></span>
<span class="line"><span>&quot;&quot;(空字符串) </span></span>
<span class="line"><span>[](空列表) </span></span>
<span class="line"><span>()(空元组) </span></span>
<span class="line"><span>{}(空字典)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="pandas" tabindex="-1">pandas <a class="header-anchor" href="#pandas" aria-label="Permalink to &quot;pandas&quot;">​</a></h2><p>执行以下程序，如果希望输出 <code>df</code> 对象中 <code>x</code> 列数据大于其平均值的所有行，下列选项中，做法正确的一项是：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pandas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.DataFrame({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df.x.mean()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>A. <code>print(df.query(&#39;x &gt; a&#39;))</code></p><p>B. <code>print(df.query(&#39;x &gt; @a&#39;))</code></p><p>C. <code>print(df.query(&#39;x &gt; &amp;a&#39;))</code></p><p>D. <code>print(df.query(&#39;x &gt; $a&#39;))</code></p><p>正确答案是 <strong>B</strong>。使用 <code>@</code> 符号来引用外部变量 <code>a</code>。本题考查pandas。</p><p>df.query(expr)可以使用布尔表达式查询 DataFrame 的列，表达式是一个字符串，类似于SQL中的where从句，如果希望在表达式中引入变量，可以通过@符号来引入。本题中，查询字符串中的x即为df对象的x列，a为变量，需要借助@符号来引入，B选项符合题意。</p>`,682)]))}const g=i(e,[["render",t]]);export{c as __pageData,g as default};
