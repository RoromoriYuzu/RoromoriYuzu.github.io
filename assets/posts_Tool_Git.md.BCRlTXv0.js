import{_ as s,c as i,o as e,ag as n}from"./chunks/framework.BgId8OS5.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/Tool/Git.md","filePath":"posts/Tool/Git.md","lastUpdated":null}'),t={name:"posts/Tool/Git.md"};function l(p,a,r,d,h,c){return e(),i("div",null,a[0]||(a[0]=[n(`<h2 id="git-reset" tabindex="-1">git reset <a class="header-anchor" href="#git-reset" aria-label="Permalink to &quot;git reset&quot;">​</a></h2><ul><li><code>git reset</code> ：回滚到某次提交。</li><li><code>git reset --soft</code>：此次提交之后的修改会被退回到暂存区。</li><li><code>git reset --hard</code>：此次提交之后的修改不做任何保留，<code>git status</code> 查看工作区是没有记录的。</li></ul><h3 id="回滚代码" tabindex="-1">回滚代码 <a class="header-anchor" href="#回滚代码" aria-label="Permalink to &quot;回滚代码&quot;">​</a></h3><p>如果需要删除的 commit 是最新的，那么可以通过 <code>git reset</code> 命令将代码回滚到之前某次提交的状态，但一定要将现有的代码做好备份，否则回滚之后这些变动都会消失。具体操作如下：</p><div class="language-scss vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git log </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查询要回滚的 commit_id</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git reset </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--hard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commit_id </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// HEAD 就会指向此次的提交记录</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push origin </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">HEAD</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> --force</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 强制推送到远端</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="误删恢复" tabindex="-1">误删恢复 <a class="header-anchor" href="#误删恢复" aria-label="Permalink to &quot;误删恢复&quot;">​</a></h3><p>如果回滚代码之后发现复制错了 commit_id，或者误删了某次 commit 记录，也可以通过下方代码恢复：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> relog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 复制要恢复操作的前面的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 将</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 换成要恢复的历史记录的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意：删除中间某次提交时最好不要用 <code>git reset</code> 回退远程库，因为之后其他人提交代码时用 <code>git pull</code> 也会把自己的本地仓库回退到之前的版本，容易出现差错进而增加不必要的工作量。</p><h2 id="基本命令" tabindex="-1">基本命令 <a class="header-anchor" href="#基本命令" aria-label="Permalink to &quot;基本命令&quot;">​</a></h2><h3 id="设置用户" tabindex="-1">设置用户 <a class="header-anchor" href="#设置用户" aria-label="Permalink to &quot;设置用户&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git config --global user.name &quot;Your Name&quot;</span></span>
<span class="line"><span>git config --global user.email &quot;email@example.com&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="初始化一个git仓库" tabindex="-1">初始化一个Git仓库 <a class="header-anchor" href="#初始化一个git仓库" aria-label="Permalink to &quot;初始化一个Git仓库&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="仓库当前的状态以及下一步的提示" tabindex="-1">仓库当前的状态以及下一步的提示 <a class="header-anchor" href="#仓库当前的状态以及下一步的提示" aria-label="Permalink to &quot;仓库当前的状态以及下一步的提示&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="添加文件到git仓库" tabindex="-1">添加文件到Git仓库 <a class="header-anchor" href="#添加文件到git仓库" aria-label="Permalink to &quot;添加文件到Git仓库&quot;">​</a></h3><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li></ol><p>​ <code>git add .</code>添加当前目录下的所有文件；</p><ol start="2"><li>使用命令<code>git commit</code>；</li></ol><h3 id="添加远程库" tabindex="-1">添加远程库 <a class="header-anchor" href="#添加远程库" aria-label="Permalink to &quot;添加远程库&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone https://example.com/example.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="提交到远程库" tabindex="-1">提交到远程库 <a class="header-anchor" href="#提交到远程库" aria-label="Permalink to &quot;提交到远程库&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push origin [branches]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="删除远程库" tabindex="-1">删除远程库 <a class="header-anchor" href="#删除远程库" aria-label="Permalink to &quot;删除远程库&quot;">​</a></h3><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git remote -v</span></span>
<span class="line"><span>origin  git@github.com:michaelliao/learn-git.git (fetch)</span></span>
<span class="line"><span>origin  git@github.com:michaelliao/learn-git.git (push)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后，根据名字删除，比如删除<code>origin</code>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git remote rm origin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p><h3 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h3><ul><li><p>创建分支</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch [branch name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>查看分支</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>切换分支</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout [branch name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><p>​ 文件会直接从 <code>master</code> 分支复制过来</p><ul><li><p>创建并切换分支</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout -b [branch name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>删除分支</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch -d [branch name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>强制删除</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch -D [branch name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><p>视频教程: <a href="https://www.bilibili.com/video/BV15h411f74h?vd_source=06a322702289a4ef5e634eba1c033644" target="_blank" rel="noreferrer">git合并多个commit</a><a href="https://www.bilibili.com/video/BV1r3411F7kn?vd_source=06a322702289a4ef5e634eba1c033644" target="_blank" rel="noreferrer">Git工作流和核心原理 | GitHub基本操作 | VS Code里使用Git和关联GitHub</a></p><h2 id="git-reset-1" tabindex="-1">git reset <a class="header-anchor" href="#git-reset-1" aria-label="Permalink to &quot;git reset&quot;">​</a></h2></li><li><p><code>git reset</code> ：回滚到某次提交。</p></li><li><p><code>git reset --soft</code>：此次提交之后的修改会被退回到暂存区。</p></li><li><p><code>git reset --hard</code>：此次提交之后的修改不做任何保留，<code>git status</code> 查看工作区是没有记录的。</p></li></ul><h3 id="回滚代码-1" tabindex="-1">回滚代码 <a class="header-anchor" href="#回滚代码-1" aria-label="Permalink to &quot;回滚代码&quot;">​</a></h3><p>如果需要删除的 commit 是最新的，那么可以通过 <code>git reset</code> 命令将代码回滚到之前某次提交的状态，但一定要将现有的代码做好备份，否则回滚之后这些变动都会消失。具体操作如下：</p><div class="language-scss vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1. git log </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查询要回滚的 commit_id</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2. git reset </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--hard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commit_id </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// HEAD 就会指向此次的提交记录</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">3. git push origin </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">HEAD</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> --force</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 强制推送到远端</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="误删恢复-1" tabindex="-1">误删恢复 <a class="header-anchor" href="#误删恢复-1" aria-label="Permalink to &quot;误删恢复&quot;">​</a></h3><p>如果回滚代码之后发现复制错了 commit_id，或者误删了某次 commit 记录，也可以通过下方代码恢复：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> relog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 复制要恢复操作的前面的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 将</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 换成要恢复的历史记录的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意：删除中间某次提交时最好不要用 <code>git reset</code> 回退远程库，因为之后其他人提交代码时用 <code>git pull</code> 也会把自己的本地仓库回退到之前的版本，容易出现差错进而增加不必要的工作量。</p><h2 id="基本命令-1" tabindex="-1">基本命令 <a class="header-anchor" href="#基本命令-1" aria-label="Permalink to &quot;基本命令&quot;">​</a></h2><h3 id="设置用户-1" tabindex="-1">设置用户 <a class="header-anchor" href="#设置用户-1" aria-label="Permalink to &quot;设置用户&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git config --global user.name &quot;Your Name&quot;</span></span>
<span class="line"><span>$ git config --global user.email &quot;email@example.com&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="初始化一个git仓库-1" tabindex="-1">初始化一个Git仓库 <a class="header-anchor" href="#初始化一个git仓库-1" aria-label="Permalink to &quot;初始化一个Git仓库&quot;">​</a></h3><p>使用<code>git init</code>命令。</p><h3 id="仓库当前的状态以及下一步的提示-1" tabindex="-1">仓库当前的状态以及下一步的提示 <a class="header-anchor" href="#仓库当前的状态以及下一步的提示-1" aria-label="Permalink to &quot;仓库当前的状态以及下一步的提示&quot;">​</a></h3><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态</p><h3 id="添加文件到git仓库-1" tabindex="-1">添加文件到Git仓库 <a class="header-anchor" href="#添加文件到git仓库-1" aria-label="Permalink to &quot;添加文件到Git仓库&quot;">​</a></h3><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li></ol><p>​ <code>git add .</code>添加当前目录下的所有文件；</p><ol start="2"><li>使用命令<code>git commit</code>；</li></ol><h3 id="添加远程库-1" tabindex="-1">添加远程库 <a class="header-anchor" href="#添加远程库-1" aria-label="Permalink to &quot;添加远程库&quot;">​</a></h3><p><code>git clone https://example.com/example.git </code></p><h3 id="提交到远程库-1" tabindex="-1">提交到远程库 <a class="header-anchor" href="#提交到远程库-1" aria-label="Permalink to &quot;提交到远程库&quot;">​</a></h3><p><code>git push origin [branches]</code></p><h3 id="删除远程库-1" tabindex="-1">删除远程库 <a class="header-anchor" href="#删除远程库-1" aria-label="Permalink to &quot;删除远程库&quot;">​</a></h3><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git remote -v</span></span>
<span class="line"><span>origin  git@github.com:michaelliao/learn-git.git (fetch)</span></span>
<span class="line"><span>origin  git@github.com:michaelliao/learn-git.git (push)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后，根据名字删除，比如删除<code>origin</code>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git remote rm origin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p><h3 id="分支-1" tabindex="-1">分支 <a class="header-anchor" href="#分支-1" aria-label="Permalink to &quot;分支&quot;">​</a></h3><ul><li>创建分支</li></ul><p>​ <code>git branch [branch name]</code></p><ul><li>查看分支</li></ul><p>​ <code>git branch </code></p><ul><li>切换分支</li></ul><p>​ <code>git checkout [branch name]</code></p><p>​ 文件会直接从 <code>master</code> 分支复制过来</p><ul><li><p>创建并切换分支</p><p><code>git checkout -b [branch name]</code></p></li><li><p>删除分支</p><p><code>git branch -d [branch name]</code></p><p>强制删除</p><p><code>git branch -D [branch name]</code></p></li></ul>`,71)]))}const u=s(t,[["render",l]]);export{b as __pageData,u as default};
