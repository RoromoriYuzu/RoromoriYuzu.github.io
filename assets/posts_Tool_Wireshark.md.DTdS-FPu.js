import{_ as r,c as t,o as s,ag as e}from"./chunks/framework.BgId8OS5.js";const o="/post-images/1658760756372.png",i="/post-images/1658760828696.png",p="/post-images/1658760887409.png",l="/post-images/1658760909400.png",n="/post-images/1658760941078.png",c="/post-images/1658760556242.png",g="/post-images/1658760602911.png",m="/post-images/1658760632775.png",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/Tool/Wireshark.md","filePath":"posts/Tool/Wireshark.md","lastUpdated":null}'),h={name:"posts/Tool/Wireshark.md"};function _(d,a,k,T,P,f){return s(),t("div",null,a[0]||(a[0]=[e('<h2 id="wireshakr抓包界面介绍" tabindex="-1">Wireshakr抓包界面介绍 <a class="header-anchor" href="#wireshakr抓包界面介绍" aria-label="Permalink to &quot;Wireshakr抓包界面介绍&quot;">​</a></h2><p><a href="https://www.cnblogs.com/linyfeng/p/9496126.html" target="_blank" rel="noreferrer">节选自.....</a><img src="'+o+'" alt="" loading="lazy"></p><p>说明：数据包列表区中不同的协议使用了不同的颜色区分。协议颜色标识定位在菜单栏View --&gt; Coloring Rules。如下所示</p><p><img src="'+i+'" alt="" loading="lazy"></p><h4 id="wireshark-主要分为这几个界面" tabindex="-1">WireShark 主要分为这几个界面 <a class="header-anchor" href="#wireshark-主要分为这几个界面" aria-label="Permalink to &quot;WireShark 主要分为这几个界面&quot;">​</a></h4><ol><li>Display Filter(显示过滤器)， 用于设置过滤条件进行数据包列表过滤。菜单路径：Analyze --&gt; Display Filters。</li></ol><p><img src="'+p+'" alt="" loading="lazy"></p><ol start="2"><li><p>Packet List Pane(数据包列表)， 显示捕获到的数据包，每个数据包包含编号，时间戳，源地址，目标地址，协议，长度，以及数据包信息。 不同协议的数据包使用了不同的颜色区分显示。</p><p><img src="'+l+'" alt="" loading="lazy"></p></li><li><p>Packet Details Pane(数据包详细信息), 在数据包列表中选择指定数据包，在数据包详细信息中会显示数据包的所有详细信息内容。数据包详细信息面板是最重要的，用来查看协议中的每一个字段。各行信息分别为</p></li></ol><p>（1）Frame: 物理层的数据帧概况</p><p>（2）Ethernet II: 数据链路层以太网帧头部信息</p><p>（3）Internet Protocol Version 4: 互联网层IP包头部信息</p><p>（4）Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP</p><p>（5）Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议</p><p><img src="'+n+'" alt="" loading="lazy"></p><h2 id="使用-wireshark-解密https" tabindex="-1">使用 Wireshark 解密HTTPS <a class="header-anchor" href="#使用-wireshark-解密https" aria-label="Permalink to &quot;使用 Wireshark 解密HTTPS&quot;">​</a></h2><p>通过设置环境变量截取浏览器的pre_master_secret,进而实现解密HTTPS的目的。</p><p>环境变量中新建用户变量SSLKEYLOGFILE=路径\\sslkey.log文件</p><p><img src="'+c+'" alt="" loading="lazy"></p><p>之后再wireshark中ssl配置中制定该文件位置即可。</p><p><img src="'+g+'" alt="" loading="lazy"></p><p>即可解密浏览器的访问流量：</p><p><img src="'+m+'" alt="" loading="lazy"></p>',22)]))}const S=r(h,[["render",_]]);export{u as __pageData,S as default};
