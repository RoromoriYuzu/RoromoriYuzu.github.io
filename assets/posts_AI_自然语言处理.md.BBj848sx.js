import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.BgId8OS5.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/AI/自然语言处理.md","filePath":"posts/AI/自然语言处理.md","lastUpdated":null}'),p={name:"posts/AI/自然语言处理.md"};function e(t,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="常用库" tabindex="-1">常用库 <a class="header-anchor" href="#常用库" aria-label="Permalink to &quot;常用库&quot;">​</a></h2><ol><li><strong>Pandas</strong>: <ul><li><strong>作用</strong>: 用于数据分析和处理，提供了数据结构和数据分析工具，尤其适用于处理结构化数据（如表格数据）。</li><li><strong>功能</strong>: 数据清洗、数据转换、数据分析、数据可视化、数据操作等。</li></ul></li><li><strong>Matplotlib</strong>: <ul><li><strong>作用</strong>: 用于绘制各种静态、交互式和动态的数据可视化图表。</li><li><strong>功能</strong>: 绘制折线图、柱状图、散点图、饼图、箱线图等。</li></ul></li><li><strong>Seaborn</strong>: <ul><li><strong>作用</strong>: 用于创建统计图形，可以提高Matplotlib图表的美观度和信息表达性。</li><li><strong>功能</strong>: 绘制更复杂、更具吸引力的统计图表，如热力图、分布图、分类散点图等。</li></ul></li><li><strong>re (正则表达式)</strong>: <ul><li><strong>作用</strong>: 用于文本匹配、搜索和处理，支持通过模式描述匹配规则。</li><li><strong>功能</strong>: 匹配字符串、替换字符串、提取信息等。</li></ul></li><li><strong>jieba</strong>: <ul><li><strong>作用</strong>: 用于中文分词，将中文文本按词语进行切分。</li><li><strong>功能</strong>: 分词、词频统计、关键词提取等。</li></ul></li><li><strong>wordcloud</strong>: <ul><li><strong>作用</strong>: 用于生成词云图，展示文本中词语的重要程度或频率。</li><li><strong>功能</strong>: 根据文本中词语的频率或权重生成词云图。</li></ul></li><li><strong>gensim</strong>: <ul><li><strong>作用</strong>: 用于文本建模和主题建模，特别是在自然语言处理中使用。</li><li><strong>功能</strong>: 提供工具和算法用于文本向量化、词向量训练、主题模型构建等。</li></ul></li><li><strong>snownlp</strong>: <ul><li><strong>作用</strong>: 用于处理中文文本情感分析。</li><li><strong>功能</strong>: 提供情感分析、分词、标注等功能，尤其是针对中文文本的情感分析。</li></ul></li></ol><h2 id="jieba" tabindex="-1">jieba <a class="header-anchor" href="#jieba" aria-label="Permalink to &quot;jieba&quot;">​</a></h2><p><strong>jieba.lcut：</strong></p><ul><li><p>分词粒度：与 <code>jieba.cut</code> 类似，分词粒度较粗。</p></li><li><p>适用场景：一般用于普通文本分词，返回一个包含分词结果的列表。</p></li><li><p>示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pythonCopy codeimport jieba</span></span>
<span class="line"><span></span></span>
<span class="line"><span>text = &quot;我喜欢学习自然语言处理&quot;</span></span>
<span class="line"><span>result = jieba.lcut(text)</span></span>
<span class="line"><span>print(result)  # 输出：[&#39;我&#39;, &#39;喜欢&#39;, &#39;学习&#39;, &#39;自然语言处理&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p><strong>jieba.cut：</strong></p><ul><li><p>分词粒度：分词粒度较粗，适用于普通文本分词。</p></li><li><p>适用场景：一般用于普通文本分词，返回一个生成器对象，需要迭代获取分词结果。</p></li><li><p>示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pythonCopy codeimport jieba</span></span>
<span class="line"><span></span></span>
<span class="line"><span>text = &quot;我喜欢学习自然语言处理&quot;</span></span>
<span class="line"><span>result = jieba.cut(text)</span></span>
<span class="line"><span>print(list(result))  # 输出：[&#39;我&#39;, &#39;喜欢&#39;, &#39;学习&#39;, &#39;自然语言处理&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p><strong>jieba.cut_for_search：</strong></p><ul><li><p>分词粒度：分词粒度较细，适用于搜索引擎等需要更细粒度分词的场景。</p></li><li><p>适用场景：用于搜索引擎等需要更细粒度分词的场景，返回一个生成器对象，需要迭代获取分词结果。</p></li><li><p>示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pythonCopy codeimport jieba</span></span>
<span class="line"><span></span></span>
<span class="line"><span>text = &quot;我喜欢学习自然语言处理&quot;</span></span>
<span class="line"><span>result = jieba.cut_for_search(text)</span></span>
<span class="line"><span>print(list(result))  # 输出：[&#39;我&#39;, &#39;喜欢&#39;, &#39;学习&#39;, &#39;自然&#39;, &#39;语言&#39;, &#39;自然语言&#39;, &#39;处理&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p><strong>jieba.cut(sent, cut_all=True)：</strong></p><ul><li><p>分词粒度：分词粒度最细，尝试切分所有可能的词语。</p></li><li><p>适用场景：不常用，用于分词粒度最细的全模式，通常会导致大量的冗余分词结果。</p></li><li><p>示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pythonCopy codeimport jieba</span></span>
<span class="line"><span></span></span>
<span class="line"><span>text = &quot;我喜欢学习自然语言处理&quot;</span></span>
<span class="line"><span>result = jieba.cut(text, cut_all=True)</span></span>
<span class="line"><span>print(list(result))  # 输出：[&#39;我&#39;, &#39;喜欢&#39;, &#39;学习&#39;, &#39;自然&#39;, &#39;自然语言&#39;, &#39;语言&#39;, &#39;处理</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p><strong>jieba.load_userdict(&#39;./data/user_dict.utf8&#39;)</strong></p><p>加载用户自定义词典，以丰富分词库中的词汇，让分词器能够识别用户自定义的词语。这不会改变词语的权重，只是增加了分词器的词汇库。</p><p><strong>aly.set_idf_path(&#39;./data/idf.txt.big&#39;)</strong></p><p>主要用于自定义 IDF 文件，以影响分词结果中词语的权重。</p><p><strong>aly.set_stop_words(&#39;./data/stop_words.utf8&#39;)</strong></p><p><code>aly.set_stop_words(&#39;./stop_words.utf8&#39;)</code> 这行代码的作用是设置停用词文件，指定了一个名为 &quot;stop_words.utf8&quot; 的文件作为停用词表。该文件内容应该包含要过滤掉的停用词，每个词汇占一行。</p><h3 id="提取关键词" tabindex="-1">提取关键词 <a class="header-anchor" href="#提取关键词" aria-label="Permalink to &quot;提取关键词&quot;">​</a></h3><p>提取关键词会自动忽略特殊符号</p><p><strong>aly.extract_tags(text, topK=5, withWeight=True, allowPOS=(&#39;n&#39;, &#39;v&#39;))</strong></p><ul><li><code>text</code>：表示要提取关键词的文本。</li><li><code>topK=5</code>：表示提取的关键词数量，这里设置为提取前 5 个关键词。</li><li><code>withWeight=True</code>：表示同时返回关键词的权重。权重是基于 TF-IDF 算法计算的关键词重要性指标。</li><li><code>allowPOS=(&#39;n&#39;, &#39;v&#39;)</code>：表示允许的词性。这里设置为只允许名词（n）和动词（v）作为关键词的词性。</li></ul><p>文本中提取了前五个关键词，这些关键词根据 TF-IDF 算法的分数进行排序。自动识别文本中的重要词汇，通常用于文本摘要、关键词提取、主题分析等自然语言处理任务中。</p><p><strong>aly.textrank(text, topK=5)</strong></p><p>基于 TextRank 算法，自动分析文本中词语之间的关联关系，然后根据关联度来评估词语的重要性。</p><h2 id="re-正则匹配库" tabindex="-1">re 正则匹配库 <a class="header-anchor" href="#re-正则匹配库" aria-label="Permalink to &quot;re 正则匹配库&quot;">​</a></h2><p><code>re.match()</code> 函数在字符串的开头进行匹配，只有当模式与字符串的开头完全匹配时才返回匹配对象。而 <code>re.search()</code> 函数则在整个字符串中搜索模式，返回第一个匹配项的匹配对象。</p><h3 id="match" tabindex="-1">match <a class="header-anchor" href="#match" aria-label="Permalink to &quot;match&quot;">​</a></h3><p><code>re.match()</code> 函数来尝试在 <code>text1</code> 字符串的开头匹配模式 <code>&#39;自然语言处理&#39;</code>。由于模式与字符串的开头完全匹配，因此返回一个匹配对象 <code>&lt;re.Match object; span=(0, 5), match=&#39;自然语言处理&#39;&gt;</code>。</p><p>使用 <code>re.match()</code> 函数来尝试在 <code>text1</code> 字符串的开头匹配模式 <code>&#39;语言处理&#39;</code>。由于模式不与字符串的开头完全匹配，因此返回 <code>None</code>。</p><h3 id="search" tabindex="-1">search <a class="header-anchor" href="#search" aria-label="Permalink to &quot;search&quot;">​</a></h3><p>使用 <code>re.search()</code> 函数来在 <code>text1</code> 字符串中搜索模式 <code>&#39;语言处理&#39;</code>。由于模式在字符串中出现，返回一个匹配对象 <code>&lt;re.Match object; span=(3, 8), match=&#39;语言处理&#39;&gt;</code>，表示模式在字符位置 3 到 8 之间匹配成功。</p><h3 id="findall" tabindex="-1">findall <a class="header-anchor" href="#findall" aria-label="Permalink to &quot;findall&quot;">​</a></h3><p><code>re.findall(&#39;计算机&#39;, text1)</code>，将返回一个列表，其中包含在 <code>text1</code> 中找到的所有与模式 <code>&#39;计算机&#39;</code> 匹配的子字符串。</p><h3 id="sub" tabindex="-1">sub <a class="header-anchor" href="#sub" aria-label="Permalink to &quot;sub&quot;">​</a></h3><p><code>re.sub(&#39;自然语言处理&#39;, &#39;NLP&#39;, text1)</code>，将对 <code>text1</code> 中的匹配项 <code>&#39;自然语言处理&#39;</code> 进行替换。将替换为 <code>&#39;NLP&#39;</code>。</p><h3 id="r" tabindex="-1">r <a class="header-anchor" href="#r" aria-label="Permalink to &quot;r&quot;">​</a></h3><p><code>r</code> 是一个前缀，表示原始字符串（raw string）。使用原始字符串，可以确保反斜杠 <code>\\</code> 不会被解释为特殊字符。</p><p>当使用正则表达式时，某些字符具有特殊意义，例如 <code>\\n</code> 表示换行符，<code>\\t</code> 表示制表符等。如果想要匹配这些特殊字符本身而不是它们的特殊含义，可以在正则表达式模式的前面添加 <code>r</code> 前缀，使其成为原始字符串。</p><p>例如，考虑以下正则表达式模式：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pattern </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(re.findall(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b[a-zA-Z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, text2))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这行代码使用了 <code>re.findall()</code> 函数来在 <code>text2</code> 字符串中找到所有由英文字母组成的单词。</p><p>具体解释如下：</p><ul><li><code>\\b</code> 是一个正则表达式的元字符，表示单词的边界。它用于匹配单词的开头或结尾，确保我们只匹配完整的单词而不是单词的一部分。</li><li><code>[a-zA-Z]</code> 是一个字符类，表示匹配任意一个英文字母（大小写不限）。</li><li><code>+</code> 是一个量词，表示匹配前面的字符或字符类一次或多次。</li><li><code>re.findall()</code> 函数将返回所有匹配到的结果，以列表的形式进行返回。</li></ul><h2 id="pandas" tabindex="-1">Pandas <a class="header-anchor" href="#pandas" aria-label="Permalink to &quot;Pandas&quot;">​</a></h2><h3 id="iloc" tabindex="-1">iloc <a class="header-anchor" href="#iloc" aria-label="Permalink to &quot;iloc&quot;">​</a></h3><p>Pandas DataFrame对象的一个属性，用于基于整数位置对数据进行选择和切片。<code>iloc</code> 允许你通过行和列的整数位置来访问数据，而不是使用标签或索引。</p><p>语法如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.iloc[行位置, 列位置]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，行位置和列位置可以是单个整数、整数切片或整数列表，用于选择相应的行和列。</p><p>以下是一些示例用法：</p><ol><li><p>选择单个元素：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.iloc[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 选择第0行第1列的元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>选择整行：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.iloc[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 选择第1行的所有列</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>选择整列：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.iloc[:, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 选择第2列的所有行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>切片多行和多列：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.iloc[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 选择第1行到第2行和第0列到第1列的数据</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>选择指定行和列的位置：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.iloc[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 选择第0行和第2行以及第1列和第3列的数据</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h3 id="字段重命名" tabindex="-1">字段重命名 <a class="header-anchor" href="#字段重命名" aria-label="Permalink to &quot;字段重命名&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df.rename(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">columns</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;新&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;旧&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;新1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;旧1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="read-csv" tabindex="-1">read_csv <a class="header-anchor" href="#read-csv" aria-label="Permalink to &quot;read_csv&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.read_csv(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">header </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 时第一行为主体内容，不加时默认第一行为标题</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="gensim" tabindex="-1">Gensim <a class="header-anchor" href="#gensim" aria-label="Permalink to &quot;Gensim&quot;">​</a></h2><p>通常，我们要处理的原生语料是一堆文档的集合，每一篇文档又是一些原生字符的集合。在交给Gensim的模型训练之前，我们需要将这些原生字符解析成Gensim能处理的稀疏向量的格式。由于语言和应用的多样性，我们需要先对原始的文本进行分词、去除停用词等操作，得到每一篇文档的特征列表。例如，在词袋模型中，文档的特征就是其包含的word：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>texts = [[&#39;human&#39;, &#39;interface&#39;, &#39;computer&#39;],</span></span>
<span class="line"><span>[&#39;survey&#39;, &#39;user&#39;, &#39;computer&#39;, &#39;system&#39;, &#39;response&#39;, &#39;time&#39;],</span></span>
<span class="line"><span>[&#39;eps&#39;, &#39;user&#39;, &#39;interface&#39;, &#39;system&#39;],</span></span>
<span class="line"><span>[&#39;system&#39;, &#39;human&#39;, &#39;system&#39;, &#39;eps&#39;],</span></span>
<span class="line"><span>[&#39;user&#39;, &#39;response&#39;, &#39;time&#39;],</span></span>
<span class="line"><span>[&#39;trees&#39;],</span></span>
<span class="line"><span>[&#39;graph&#39;, &#39;trees&#39;],</span></span>
<span class="line"><span>[&#39;graph&#39;, &#39;minors&#39;, &#39;trees&#39;],</span></span>
<span class="line"><span>[&#39;graph&#39;, &#39;minors&#39;, &#39;survey&#39;]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>其中，corpus的每一个元素对应一篇文档。</p><p>例：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">documents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;世界那么大我想去河南周口看看周口&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;身在周口的宝宝恭喜了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &#39;2岁宝宝坠楼，他们接住了！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A县发现3例新冠肺炎无症状感染者&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">texts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[word </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> word </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jieba.cut(document)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> word </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stopwords] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> documents]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 分词、去停用词</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(texts)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;世界&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;想&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;河南&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;周口&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;看看&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;周口&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;身在&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;周口&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;宝宝&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;恭喜&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;岁&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;宝宝&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;坠楼&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;接住&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;县&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;发现&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;例新冠&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;肺炎&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;无症状&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;感染者&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>接下来，我们可以调用Gensim提供的API建立语料特征（此处即是word）的索引字典，并将文本特征的原始表达转化成词袋模型对应的稀疏向量的表达。依然以词袋模型为例：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gensim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corpora</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dictionary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corpora.Dictionary(texts)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">corpus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [dictionary.doc2bow(text) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> texts]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corpus[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [(0, 1), (1, 1), (2, 1)]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="dictionary-词典" tabindex="-1">dictionary 词典 <a class="header-anchor" href="#dictionary-词典" aria-label="Permalink to &quot;dictionary 词典&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dictionary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corpora.Dictionary(texts)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 加载语料，生成字典</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dictionary)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Dictionary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unique tokens: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;世界&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;周口&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;想&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;河南&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;看看&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>词典即包含不重复的全部词，是将原始文本中的词语映射到唯一标识符的数据结构。它创建了词语到数字之间的对应关系，这些数字可以用于进一步的分析和处理。词典将每个词映射到一个唯一的ID，这样可以在模型训练和其他处理中使用数字而不是字符串。</p><p>查看每个词对应的 ID</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key, value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dictionary.items():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, value)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 世界</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 周口</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 想</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 河南</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 看看</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 宝宝</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="词袋模型" tabindex="-1">词袋模型 <a class="header-anchor" href="#词袋模型" aria-label="Permalink to &quot;词袋模型&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">corpus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [dictionary.doc2bow(text) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> texts]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)], [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)], [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)], [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>corpus = [dictionary.doc2bow(text) for text in texts]</code> 这行代码的作用是将文本数据（<code>texts</code>）转换为一种称为词袋模型（Bag of Words, BoW）的数值化表示形式。</p><ul><li><code>texts</code>: 这是分词后的文本数据，每个文本被表示为一个词语列表。</li><li><code>dictionary.doc2bow(text)</code>: 这是用词典（<code>dictionary</code>）将分词后的文本转换为词袋模型的过程。<code>doc2bow</code> 方法将文本转换为一种简单的数值表示，其中每个词语都与一个唯一的整数 ID 相关联，并且与词语在文本中出现的次数一起被记录。</li><li><code>corpus = [...]</code>: 这部分将处理后的文本数据转换为一个称为语料库（corpus）的集合，其中每个文本都用词袋模型表示。</li></ul><p>每个文本经过 <code>dictionary.doc2bow(text)</code> 处理后，会得到一个由元组组成的列表，每个元组包含两个值：词语的唯一整数 ID 和该词语在文本中的出现次数。这个过程可以被看作将文本量化到一个数值化的表示。</p>`,74)]))}const c=i(p,[["render",e]]);export{o as __pageData,c as default};
